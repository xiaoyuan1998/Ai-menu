"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fal-ai";
exports.ids = ["vendor-chunks/@fal-ai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@fal-ai/client/node_modules/eventsource-parser/dist/index.cjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@fal-ai/client/node_modules/eventsource-parser/dist/index.cjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction createParser(onParse) {\n    let isFirstChunk;\n    let buffer;\n    let startingPosition;\n    let startingFieldLength;\n    let eventId;\n    let eventName;\n    let data;\n    reset();\n    return {\n        feed,\n        reset\n    };\n    function reset() {\n        isFirstChunk = true;\n        buffer = \"\";\n        startingPosition = 0;\n        startingFieldLength = -1;\n        eventId = void 0;\n        eventName = void 0;\n        data = \"\";\n    }\n    function feed(chunk) {\n        buffer = buffer ? buffer + chunk : chunk;\n        if (isFirstChunk && hasBom(buffer)) {\n            buffer = buffer.slice(BOM.length);\n        }\n        isFirstChunk = false;\n        const length = buffer.length;\n        let position = 0;\n        let discardTrailingNewline = false;\n        while(position < length){\n            if (discardTrailingNewline) {\n                if (buffer[position] === \"\\n\") {\n                    ++position;\n                }\n                discardTrailingNewline = false;\n            }\n            let lineLength = -1;\n            let fieldLength = startingFieldLength;\n            let character;\n            for(let index = startingPosition; lineLength < 0 && index < length; ++index){\n                character = buffer[index];\n                if (character === \":\" && fieldLength < 0) {\n                    fieldLength = index - position;\n                } else if (character === \"\\r\") {\n                    discardTrailingNewline = true;\n                    lineLength = index - position;\n                } else if (character === \"\\n\") {\n                    lineLength = index - position;\n                }\n            }\n            if (lineLength < 0) {\n                startingPosition = length - position;\n                startingFieldLength = fieldLength;\n                break;\n            } else {\n                startingPosition = 0;\n                startingFieldLength = -1;\n            }\n            parseEventStreamLine(buffer, position, fieldLength, lineLength);\n            position += lineLength + 1;\n        }\n        if (position === length) {\n            buffer = \"\";\n        } else if (position > 0) {\n            buffer = buffer.slice(position);\n        }\n    }\n    function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {\n        if (lineLength === 0) {\n            if (data.length > 0) {\n                onParse({\n                    type: \"event\",\n                    id: eventId,\n                    event: eventName || void 0,\n                    data: data.slice(0, -1)\n                });\n                data = \"\";\n                eventId = void 0;\n            }\n            eventName = void 0;\n            return;\n        }\n        const noValue = fieldLength < 0;\n        const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));\n        let step = 0;\n        if (noValue) {\n            step = lineLength;\n        } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n            step = fieldLength + 2;\n        } else {\n            step = fieldLength + 1;\n        }\n        const position = index + step;\n        const valueLength = lineLength - step;\n        const value = lineBuffer.slice(position, position + valueLength).toString();\n        if (field === \"data\") {\n            data += value ? \"\".concat(value, \"\\n\") : \"\\n\";\n        } else if (field === \"event\") {\n            eventName = value;\n        } else if (field === \"id\" && !value.includes(\"\\x00\")) {\n            eventId = value;\n        } else if (field === \"retry\") {\n            const retry = parseInt(value, 10);\n            if (!Number.isNaN(retry)) {\n                onParse({\n                    type: \"reconnect-interval\",\n                    value: retry\n                });\n            }\n        }\n    }\n}\nconst BOM = [\n    239,\n    187,\n    191\n];\nfunction hasBom(buffer) {\n    return BOM.every((charCode, index)=>buffer.charCodeAt(index) === charCode);\n}\nexports.createParser = createParser; //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/node_modules/eventsource-parser/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/auth.js":
/*!*************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/auth.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TOKEN_EXPIRATION_SECONDS = void 0;\nexports.getTemporaryAuthToken = getTemporaryAuthToken;\nconst config_1 = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/@fal-ai/client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nexports.TOKEN_EXPIRATION_SECONDS = 120;\n/**\n * Get a token to connect to the realtime endpoint.\n */ function getTemporaryAuthToken(app, config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const appId = (0, utils_1.parseEndpointId)(app);\n        const token = yield (0, request_1.dispatchRequest)({\n            method: \"POST\",\n            targetUrl: `${(0, config_1.getRestApiUrl)()}/tokens/`,\n            config,\n            input: {\n                allowed_apps: [\n                    appId.alias\n                ],\n                token_expiration: exports.TOKEN_EXPIRATION_SECONDS\n            }\n        });\n        // keep this in case the response was wrapped (old versions of the proxy do that)\n        // should be safe to remove in the future\n        if (typeof token !== \"string\" && token[\"detail\"]) {\n            return token[\"detail\"];\n        }\n        return token;\n    });\n} //# sourceMappingURL=auth.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2F1dGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZLElBQUssSUFBSSxJQUFJLENBQUNBLFNBQVMsSUFBSyxTQUFVQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsQ0FBQyxFQUFFQyxTQUFTO0lBQ25GLFNBQVNDLE1BQU1DLEtBQUs7UUFBSSxPQUFPQSxpQkFBaUJILElBQUlHLFFBQVEsSUFBSUgsRUFBRSxTQUFVSSxPQUFPO1lBQUlBLFFBQVFEO1FBQVE7SUFBSTtJQUMzRyxPQUFPLElBQUtILENBQUFBLEtBQU1BLENBQUFBLElBQUlLLE9BQU0sQ0FBQyxFQUFHLFNBQVVELE9BQU8sRUFBRUUsTUFBTTtRQUNyRCxTQUFTQyxVQUFVSixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsVUFBVVEsSUFBSSxDQUFDTjtZQUFTLEVBQUUsT0FBT08sR0FBRztnQkFBRUosT0FBT0k7WUFBSTtRQUFFO1FBQzFGLFNBQVNDLFNBQVNSLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxTQUFTLENBQUMsUUFBUSxDQUFDRTtZQUFTLEVBQUUsT0FBT08sR0FBRztnQkFBRUosT0FBT0k7WUFBSTtRQUFFO1FBQzdGLFNBQVNGLEtBQUtJLE1BQU07WUFBSUEsT0FBT0MsSUFBSSxHQUFHVCxRQUFRUSxPQUFPVCxLQUFLLElBQUlELE1BQU1VLE9BQU9ULEtBQUssRUFBRVcsSUFBSSxDQUFDUCxXQUFXSTtRQUFXO1FBQzdHSCxLQUFLLENBQUNQLFlBQVlBLFVBQVVjLEtBQUssQ0FBQ2pCLFNBQVNDLGNBQWMsRUFBRSxHQUFHVSxJQUFJO0lBQ3RFO0FBQ0o7QUFDQU8sOENBQTZDO0lBQUViLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RlLGdDQUFnQyxHQUFHLEtBQUs7QUFDeENBLDZCQUE2QixHQUFHRTtBQUNoQyxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxtRUFBVTtBQUNuQyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyxxRUFBVztBQUNyQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQyxpRUFBUztBQUNqQ0osZ0NBQWdDLEdBQUc7QUFDbkM7O0NBRUMsR0FDRCxTQUFTRSxzQkFBc0JLLEdBQUcsRUFBRUMsTUFBTTtJQUN0QyxPQUFPN0IsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxNQUFNOEIsUUFBUSxDQUFDLEdBQUdILFFBQVFJLGVBQWUsRUFBRUg7UUFDM0MsTUFBTUksUUFBUSxNQUFNLENBQUMsR0FBR04sVUFBVU8sZUFBZSxFQUFFO1lBQy9DQyxRQUFRO1lBQ1JDLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBR1gsU0FBU1ksYUFBYSxJQUFJLFFBQVEsQ0FBQztZQUNyRFA7WUFDQVEsT0FBTztnQkFDSEMsY0FBYztvQkFBQ1IsTUFBTVMsS0FBSztpQkFBQztnQkFDM0JDLGtCQUFrQm5CLFFBQVFDLHdCQUF3QjtZQUN0RDtRQUNKO1FBQ0EsaUZBQWlGO1FBQ2pGLHlDQUF5QztRQUN6QyxJQUFJLE9BQU9VLFVBQVUsWUFBWUEsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUM5QyxPQUFPQSxLQUFLLENBQUMsU0FBUztRQUMxQjtRQUNBLE9BQU9BO0lBQ1g7QUFDSixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1lbnUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvY2xpZW50L3NyYy9hdXRoLmpzPzY5OWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVE9LRU5fRVhQSVJBVElPTl9TRUNPTkRTID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRUZW1wb3JhcnlBdXRoVG9rZW4gPSBnZXRUZW1wb3JhcnlBdXRoVG9rZW47XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmNvbnN0IHJlcXVlc3RfMSA9IHJlcXVpcmUoXCIuL3JlcXVlc3RcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5leHBvcnRzLlRPS0VOX0VYUElSQVRJT05fU0VDT05EUyA9IDEyMDtcbi8qKlxuICogR2V0IGEgdG9rZW4gdG8gY29ubmVjdCB0byB0aGUgcmVhbHRpbWUgZW5kcG9pbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFRlbXBvcmFyeUF1dGhUb2tlbihhcHAsIGNvbmZpZykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGFwcElkID0gKDAsIHV0aWxzXzEucGFyc2VFbmRwb2ludElkKShhcHApO1xuICAgICAgICBjb25zdCB0b2tlbiA9IHlpZWxkICgwLCByZXF1ZXN0XzEuZGlzcGF0Y2hSZXF1ZXN0KSh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgdGFyZ2V0VXJsOiBgJHsoMCwgY29uZmlnXzEuZ2V0UmVzdEFwaVVybCkoKX0vdG9rZW5zL2AsXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAgIGFsbG93ZWRfYXBwczogW2FwcElkLmFsaWFzXSxcbiAgICAgICAgICAgICAgICB0b2tlbl9leHBpcmF0aW9uOiBleHBvcnRzLlRPS0VOX0VYUElSQVRJT05fU0VDT05EUyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBrZWVwIHRoaXMgaW4gY2FzZSB0aGUgcmVzcG9uc2Ugd2FzIHdyYXBwZWQgKG9sZCB2ZXJzaW9ucyBvZiB0aGUgcHJveHkgZG8gdGhhdClcbiAgICAgICAgLy8gc2hvdWxkIGJlIHNhZmUgdG8gcmVtb3ZlIGluIHRoZSBmdXR1cmVcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gXCJzdHJpbmdcIiAmJiB0b2tlbltcImRldGFpbFwiXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuW1wiZGV0YWlsXCJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguanMubWFwIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlRPS0VOX0VYUElSQVRJT05fU0VDT05EUyIsImdldFRlbXBvcmFyeUF1dGhUb2tlbiIsImNvbmZpZ18xIiwicmVxdWlyZSIsInJlcXVlc3RfMSIsInV0aWxzXzEiLCJhcHAiLCJjb25maWciLCJhcHBJZCIsInBhcnNlRW5kcG9pbnRJZCIsInRva2VuIiwiZGlzcGF0Y2hSZXF1ZXN0IiwibWV0aG9kIiwidGFyZ2V0VXJsIiwiZ2V0UmVzdEFwaVVybCIsImlucHV0IiwiYWxsb3dlZF9hcHBzIiwiYWxpYXMiLCJ0b2tlbl9leHBpcmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/client.js":
/*!***************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/client.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createFalClient = createFalClient;\nconst config_1 = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/@fal-ai/client/src/config.js\");\nconst queue_1 = __webpack_require__(/*! ./queue */ \"(rsc)/./node_modules/@fal-ai/client/src/queue.js\");\nconst realtime_1 = __webpack_require__(/*! ./realtime */ \"(rsc)/./node_modules/@fal-ai/client/src/realtime.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(rsc)/./node_modules/@fal-ai/client/src/storage.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/@fal-ai/client/src/streaming.js\");\n/**\n * Creates a new reference of the `FalClient`.\n * @param userConfig Optional configuration to override the default settings.\n * @returns a new instance of the `FalClient`.\n */ function createFalClient(userConfig = {}) {\n    const config = (0, config_1.createConfig)(userConfig);\n    const storage = (0, storage_1.createStorageClient)({\n        config\n    });\n    const queue = (0, queue_1.createQueueClient)({\n        config,\n        storage\n    });\n    const streaming = (0, streaming_1.createStreamingClient)({\n        config,\n        storage\n    });\n    const realtime = (0, realtime_1.createRealtimeClient)({\n        config\n    });\n    return {\n        queue,\n        realtime,\n        storage,\n        streaming,\n        stream: streaming.stream,\n        run (endpointId_1) {\n            return __awaiter(this, arguments, void 0, function*(endpointId, options = {}) {\n                const input = options.input ? yield storage.transformInput(options.input) : undefined;\n                return (0, request_1.dispatchRequest)({\n                    method: options.method,\n                    targetUrl: (0, request_1.buildUrl)(endpointId, options),\n                    input: input,\n                    config: Object.assign(Object.assign({}, config), {\n                        responseHandler: response_1.resultResponseHandler\n                    }),\n                    options: {\n                        signal: options.abortSignal\n                    }\n                });\n            });\n        },\n        subscribe: (endpointId, options)=>__awaiter(this, void 0, void 0, function*() {\n                const { request_id: requestId } = yield queue.submit(endpointId, options);\n                if (options.onEnqueue) {\n                    options.onEnqueue(requestId);\n                }\n                yield queue.subscribeToStatus(endpointId, Object.assign({\n                    requestId\n                }, options));\n                return queue.result(endpointId, {\n                    requestId\n                });\n            })\n    };\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVksSUFBSyxJQUFJLElBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBTyw4Q0FBNkM7SUFBRWIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RGUsdUJBQXVCLEdBQUdDO0FBQzFCLE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLG1FQUFVO0FBQ25DLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLGlFQUFTO0FBQ2pDLE1BQU1FLGFBQWFGLG1CQUFPQSxDQUFDLHVFQUFZO0FBQ3ZDLE1BQU1HLFlBQVlILG1CQUFPQSxDQUFDLHFFQUFXO0FBQ3JDLE1BQU1JLGFBQWFKLG1CQUFPQSxDQUFDLHVFQUFZO0FBQ3ZDLE1BQU1LLFlBQVlMLG1CQUFPQSxDQUFDLHFFQUFXO0FBQ3JDLE1BQU1NLGNBQWNOLG1CQUFPQSxDQUFDLHlFQUFhO0FBQ3pDOzs7O0NBSUMsR0FDRCxTQUFTRixnQkFBZ0JTLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLE1BQU1DLFNBQVMsQ0FBQyxHQUFHVCxTQUFTVSxZQUFZLEVBQUVGO0lBQzFDLE1BQU1HLFVBQVUsQ0FBQyxHQUFHTCxVQUFVTSxtQkFBbUIsRUFBRTtRQUFFSDtJQUFPO0lBQzVELE1BQU1JLFFBQVEsQ0FBQyxHQUFHWCxRQUFRWSxpQkFBaUIsRUFBRTtRQUFFTDtRQUFRRTtJQUFRO0lBQy9ELE1BQU1JLFlBQVksQ0FBQyxHQUFHUixZQUFZUyxxQkFBcUIsRUFBRTtRQUFFUDtRQUFRRTtJQUFRO0lBQzNFLE1BQU1NLFdBQVcsQ0FBQyxHQUFHZCxXQUFXZSxvQkFBb0IsRUFBRTtRQUFFVDtJQUFPO0lBQy9ELE9BQU87UUFDSEk7UUFDQUk7UUFDQU47UUFDQUk7UUFDQUksUUFBUUosVUFBVUksTUFBTTtRQUN4QkMsS0FBSUMsWUFBWTtZQUNaLE9BQU81QyxVQUFVLElBQUksRUFBRTZDLFdBQVcsS0FBSyxHQUFHLFVBQVdDLFVBQVUsRUFBRUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3pFLE1BQU1DLFFBQVFELFFBQVFDLEtBQUssR0FDckIsTUFBTWQsUUFBUWUsY0FBYyxDQUFDRixRQUFRQyxLQUFLLElBQzFDRTtnQkFDTixPQUFPLENBQUMsR0FBR3ZCLFVBQVV3QixlQUFlLEVBQUU7b0JBQ2xDQyxRQUFRTCxRQUFRSyxNQUFNO29CQUN0QkMsV0FBVyxDQUFDLEdBQUcxQixVQUFVMkIsUUFBUSxFQUFFUixZQUFZQztvQkFDL0NDLE9BQU9BO29CQUNQaEIsUUFBUWIsT0FBT29DLE1BQU0sQ0FBQ3BDLE9BQU9vQyxNQUFNLENBQUMsQ0FBQyxHQUFHdkIsU0FBUzt3QkFBRXdCLGlCQUFpQjVCLFdBQVc2QixxQkFBcUI7b0JBQUM7b0JBQ3JHVixTQUFTO3dCQUNMVyxRQUFRWCxRQUFRWSxXQUFXO29CQUMvQjtnQkFDSjtZQUNKO1FBQ0o7UUFDQUMsV0FBVyxDQUFDZCxZQUFZQyxVQUFZL0MsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztnQkFDaEUsTUFBTSxFQUFFNkQsWUFBWUMsU0FBUyxFQUFFLEdBQUcsTUFBTTFCLE1BQU0yQixNQUFNLENBQUNqQixZQUFZQztnQkFDakUsSUFBSUEsUUFBUWlCLFNBQVMsRUFBRTtvQkFDbkJqQixRQUFRaUIsU0FBUyxDQUFDRjtnQkFDdEI7Z0JBQ0EsTUFBTTFCLE1BQU02QixpQkFBaUIsQ0FBQ25CLFlBQVkzQixPQUFPb0MsTUFBTSxDQUFDO29CQUFFTztnQkFBVSxHQUFHZjtnQkFDdkUsT0FBT1gsTUFBTXJCLE1BQU0sQ0FBQytCLFlBQVk7b0JBQUVnQjtnQkFBVTtZQUNoRDtJQUNKO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tZW51LWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvY2xpZW50LmpzPzUyN2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRmFsQ2xpZW50ID0gY3JlYXRlRmFsQ2xpZW50O1xuY29uc3QgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5jb25zdCBxdWV1ZV8xID0gcmVxdWlyZShcIi4vcXVldWVcIik7XG5jb25zdCByZWFsdGltZV8xID0gcmVxdWlyZShcIi4vcmVhbHRpbWVcIik7XG5jb25zdCByZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9yZXF1ZXN0XCIpO1xuY29uc3QgcmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlXCIpO1xuY29uc3Qgc3RvcmFnZV8xID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbmNvbnN0IHN0cmVhbWluZ18xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nXCIpO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHJlZmVyZW5jZSBvZiB0aGUgYEZhbENsaWVudGAuXG4gKiBAcGFyYW0gdXNlckNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHNldHRpbmdzLlxuICogQHJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGBGYWxDbGllbnRgLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGYWxDbGllbnQodXNlckNvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgY29uZmlnID0gKDAsIGNvbmZpZ18xLmNyZWF0ZUNvbmZpZykodXNlckNvbmZpZyk7XG4gICAgY29uc3Qgc3RvcmFnZSA9ICgwLCBzdG9yYWdlXzEuY3JlYXRlU3RvcmFnZUNsaWVudCkoeyBjb25maWcgfSk7XG4gICAgY29uc3QgcXVldWUgPSAoMCwgcXVldWVfMS5jcmVhdGVRdWV1ZUNsaWVudCkoeyBjb25maWcsIHN0b3JhZ2UgfSk7XG4gICAgY29uc3Qgc3RyZWFtaW5nID0gKDAsIHN0cmVhbWluZ18xLmNyZWF0ZVN0cmVhbWluZ0NsaWVudCkoeyBjb25maWcsIHN0b3JhZ2UgfSk7XG4gICAgY29uc3QgcmVhbHRpbWUgPSAoMCwgcmVhbHRpbWVfMS5jcmVhdGVSZWFsdGltZUNsaWVudCkoeyBjb25maWcgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcXVldWUsXG4gICAgICAgIHJlYWx0aW1lLFxuICAgICAgICBzdG9yYWdlLFxuICAgICAgICBzdHJlYW1pbmcsXG4gICAgICAgIHN0cmVhbTogc3RyZWFtaW5nLnN0cmVhbSxcbiAgICAgICAgcnVuKGVuZHBvaW50SWRfMSkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCBhcmd1bWVudHMsIHZvaWQgMCwgZnVuY3Rpb24qIChlbmRwb2ludElkLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dCA9IG9wdGlvbnMuaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgPyB5aWVsZCBzdG9yYWdlLnRyYW5zZm9ybUlucHV0KG9wdGlvbnMuaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgcmVxdWVzdF8xLmRpc3BhdGNoUmVxdWVzdCkoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRVcmw6ICgwLCByZXF1ZXN0XzEuYnVpbGRVcmwpKGVuZHBvaW50SWQsIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dDogaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZzogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb25maWcpLCB7IHJlc3BvbnNlSGFuZGxlcjogcmVzcG9uc2VfMS5yZXN1bHRSZXNwb25zZUhhbmRsZXIgfSksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpYmU6IChlbmRwb2ludElkLCBvcHRpb25zKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlcXVlc3RfaWQ6IHJlcXVlc3RJZCB9ID0geWllbGQgcXVldWUuc3VibWl0KGVuZHBvaW50SWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25FbnF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vbkVucXVldWUocmVxdWVzdElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIHF1ZXVlLnN1YnNjcmliZVRvU3RhdHVzKGVuZHBvaW50SWQsIE9iamVjdC5hc3NpZ24oeyByZXF1ZXN0SWQgfSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXVlLnJlc3VsdChlbmRwb2ludElkLCB7IHJlcXVlc3RJZCB9KTtcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudC5qcy5tYXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiY3JlYXRlRmFsQ2xpZW50IiwiY29uZmlnXzEiLCJyZXF1aXJlIiwicXVldWVfMSIsInJlYWx0aW1lXzEiLCJyZXF1ZXN0XzEiLCJyZXNwb25zZV8xIiwic3RvcmFnZV8xIiwic3RyZWFtaW5nXzEiLCJ1c2VyQ29uZmlnIiwiY29uZmlnIiwiY3JlYXRlQ29uZmlnIiwic3RvcmFnZSIsImNyZWF0ZVN0b3JhZ2VDbGllbnQiLCJxdWV1ZSIsImNyZWF0ZVF1ZXVlQ2xpZW50Iiwic3RyZWFtaW5nIiwiY3JlYXRlU3RyZWFtaW5nQ2xpZW50IiwicmVhbHRpbWUiLCJjcmVhdGVSZWFsdGltZUNsaWVudCIsInN0cmVhbSIsInJ1biIsImVuZHBvaW50SWRfMSIsImFyZ3VtZW50cyIsImVuZHBvaW50SWQiLCJvcHRpb25zIiwiaW5wdXQiLCJ0cmFuc2Zvcm1JbnB1dCIsInVuZGVmaW5lZCIsImRpc3BhdGNoUmVxdWVzdCIsIm1ldGhvZCIsInRhcmdldFVybCIsImJ1aWxkVXJsIiwiYXNzaWduIiwicmVzcG9uc2VIYW5kbGVyIiwicmVzdWx0UmVzcG9uc2VIYW5kbGVyIiwic2lnbmFsIiwiYWJvcnRTaWduYWwiLCJzdWJzY3JpYmUiLCJyZXF1ZXN0X2lkIiwicmVxdWVzdElkIiwic3VibWl0Iiwib25FbnF1ZXVlIiwic3Vic2NyaWJlVG9TdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/config.js":
/*!***************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/config.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.credentialsFromEnv = void 0;\nexports.resolveDefaultFetch = resolveDefaultFetch;\nexports.createConfig = createConfig;\nexports.getRestApiUrl = getRestApiUrl;\nconst middleware_1 = __webpack_require__(/*! ./middleware */ \"(rsc)/./node_modules/@fal-ai/client/src/middleware.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/./node_modules/@fal-ai/client/src/runtime.js\");\nfunction resolveDefaultFetch() {\n    if (typeof fetch === \"undefined\") {\n        throw new Error(\"Your environment does not support fetch. Please provide your own fetch implementation.\");\n    }\n    return fetch;\n}\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */ function hasEnvVariables() {\n    return typeof process !== \"undefined\" && process.env && (typeof process.env.FAL_KEY !== \"undefined\" || typeof process.env.FAL_KEY_ID !== \"undefined\" && typeof process.env.FAL_KEY_SECRET !== \"undefined\");\n}\nconst credentialsFromEnv = ()=>{\n    if (!hasEnvVariables()) {\n        return undefined;\n    }\n    if (typeof process.env.FAL_KEY !== \"undefined\") {\n        return process.env.FAL_KEY;\n    }\n    return process.env.FAL_KEY_ID ? `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}` : undefined;\n};\nexports.credentialsFromEnv = credentialsFromEnv;\nconst DEFAULT_CONFIG = {\n    credentials: exports.credentialsFromEnv,\n    suppressLocalCredentialsWarning: false,\n    requestMiddleware: (request)=>Promise.resolve(request),\n    responseHandler: response_1.defaultResponseHandler\n};\n/**\n * Configures the fal client.\n *\n * @param config the new configuration.\n */ function createConfig(config) {\n    var _a;\n    let configuration = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), config), {\n        fetch: (_a = config.fetch) !== null && _a !== void 0 ? _a : resolveDefaultFetch()\n    });\n    if (config.proxyUrl) {\n        configuration = Object.assign(Object.assign({}, configuration), {\n            requestMiddleware: (0, middleware_1.withMiddleware)(configuration.requestMiddleware, (0, middleware_1.withProxy)({\n                targetUrl: config.proxyUrl\n            }))\n        });\n    }\n    const { credentials: resolveCredentials, suppressLocalCredentialsWarning } = configuration;\n    const credentials = typeof resolveCredentials === \"function\" ? resolveCredentials() : resolveCredentials;\n    if ((0, runtime_1.isBrowser)() && credentials && !suppressLocalCredentialsWarning) {\n        console.warn(\"The fal credentials are exposed in the browser's environment. \" + \"That's not recommended for production use cases.\");\n    }\n    return configuration;\n}\n/**\n * @returns the URL of the fal REST api endpoint.\n */ function getRestApiUrl() {\n    return \"https://rest.alpha.fal.ai\";\n} //# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUcsS0FBSztBQUNsQ0EsMkJBQTJCLEdBQUdHO0FBQzlCSCxvQkFBb0IsR0FBR0k7QUFDdkJKLHFCQUFxQixHQUFHSztBQUN4QixNQUFNQyxlQUFlQyxtQkFBT0EsQ0FBQywyRUFBYztBQUMzQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyx1RUFBWTtBQUN2QyxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyxxRUFBVztBQUNyQyxTQUFTSjtJQUNMLElBQUksT0FBT08sVUFBVSxhQUFhO1FBQzlCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLE9BQU9EO0FBQ1g7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNFO0lBQ0wsT0FBUSxPQUFPQyxZQUFZLGVBQ3ZCQSxRQUFRQyxHQUFHLElBQ1YsUUFBT0QsUUFBUUMsR0FBRyxDQUFDQyxPQUFPLEtBQUssZUFDM0IsT0FBT0YsUUFBUUMsR0FBRyxDQUFDRSxVQUFVLEtBQUssZUFDL0IsT0FBT0gsUUFBUUMsR0FBRyxDQUFDRyxjQUFjLEtBQUssV0FBVztBQUNqRTtBQUNBLE1BQU1mLHFCQUFxQjtJQUN2QixJQUFJLENBQUNVLG1CQUFtQjtRQUNwQixPQUFPTTtJQUNYO0lBQ0EsSUFBSSxPQUFPTCxRQUFRQyxHQUFHLENBQUNDLE9BQU8sS0FBSyxhQUFhO1FBQzVDLE9BQU9GLFFBQVFDLEdBQUcsQ0FBQ0MsT0FBTztJQUM5QjtJQUNBLE9BQU9GLFFBQVFDLEdBQUcsQ0FBQ0UsVUFBVSxHQUN2QixDQUFDLEVBQUVILFFBQVFDLEdBQUcsQ0FBQ0UsVUFBVSxDQUFDLENBQUMsRUFBRUgsUUFBUUMsR0FBRyxDQUFDRyxjQUFjLENBQUMsQ0FBQyxHQUN6REM7QUFDVjtBQUNBbEIsMEJBQTBCLEdBQUdFO0FBQzdCLE1BQU1pQixpQkFBaUI7SUFDbkJDLGFBQWFwQixRQUFRRSxrQkFBa0I7SUFDdkNtQixpQ0FBaUM7SUFDakNDLG1CQUFtQixDQUFDQyxVQUFZQyxRQUFRQyxPQUFPLENBQUNGO0lBQ2hERyxpQkFBaUJsQixXQUFXbUIsc0JBQXNCO0FBQ3REO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVN2QixhQUFhd0IsTUFBTTtJQUN4QixJQUFJQztJQUNKLElBQUlDLGdCQUFnQmhDLE9BQU9pQyxNQUFNLENBQUNqQyxPQUFPaUMsTUFBTSxDQUFDakMsT0FBT2lDLE1BQU0sQ0FBQyxDQUFDLEdBQUdaLGlCQUFpQlMsU0FBUztRQUFFbEIsT0FBTyxDQUFDbUIsS0FBS0QsT0FBT2xCLEtBQUssTUFBTSxRQUFRbUIsT0FBTyxLQUFLLElBQUlBLEtBQUsxQjtJQUFzQjtJQUNoTCxJQUFJeUIsT0FBT0ksUUFBUSxFQUFFO1FBQ2pCRixnQkFBZ0JoQyxPQUFPaUMsTUFBTSxDQUFDakMsT0FBT2lDLE1BQU0sQ0FBQyxDQUFDLEdBQUdELGdCQUFnQjtZQUFFUixtQkFBbUIsQ0FBQyxHQUFHaEIsYUFBYTJCLGNBQWMsRUFBRUgsY0FBY1IsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHaEIsYUFBYTRCLFNBQVMsRUFBRTtnQkFBRUMsV0FBV1AsT0FBT0ksUUFBUTtZQUFDO1FBQUk7SUFDeE47SUFDQSxNQUFNLEVBQUVaLGFBQWFnQixrQkFBa0IsRUFBRWYsK0JBQStCLEVBQUUsR0FBR1M7SUFDN0UsTUFBTVYsY0FBYyxPQUFPZ0IsdUJBQXVCLGFBQzVDQSx1QkFDQUE7SUFDTixJQUFJLENBQUMsR0FBRzNCLFVBQVU0QixTQUFTLE9BQU9qQixlQUFlLENBQUNDLGlDQUFpQztRQUMvRWlCLFFBQVFDLElBQUksQ0FBQyxtRUFDVDtJQUNSO0lBQ0EsT0FBT1Q7QUFDWDtBQUNBOztDQUVDLEdBQ0QsU0FBU3pCO0lBQ0wsT0FBTztBQUNYLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWVudS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL2NvbmZpZy5qcz9jNzNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVkZW50aWFsc0Zyb21FbnYgPSB2b2lkIDA7XG5leHBvcnRzLnJlc29sdmVEZWZhdWx0RmV0Y2ggPSByZXNvbHZlRGVmYXVsdEZldGNoO1xuZXhwb3J0cy5jcmVhdGVDb25maWcgPSBjcmVhdGVDb25maWc7XG5leHBvcnRzLmdldFJlc3RBcGlVcmwgPSBnZXRSZXN0QXBpVXJsO1xuY29uc3QgbWlkZGxld2FyZV8xID0gcmVxdWlyZShcIi4vbWlkZGxld2FyZVwiKTtcbmNvbnN0IHJlc3BvbnNlXzEgPSByZXF1aXJlKFwiLi9yZXNwb25zZVwiKTtcbmNvbnN0IHJ1bnRpbWVfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5mdW5jdGlvbiByZXNvbHZlRGVmYXVsdEZldGNoKCkge1xuICAgIGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91ciBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGZldGNoLiBQbGVhc2UgcHJvdmlkZSB5b3VyIG93biBmZXRjaCBpbXBsZW1lbnRhdGlvbi5cIik7XG4gICAgfVxuICAgIHJldHVybiBmZXRjaDtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSByZXF1aXJlZCBGQUwgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQuXG4gKlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIHNldCxcbiAqIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBoYXNFbnZWYXJpYWJsZXMoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBwcm9jZXNzLmVudiAmJlxuICAgICAgICAodHlwZW9mIHByb2Nlc3MuZW52LkZBTF9LRVkgIT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAgICAgICAgICh0eXBlb2YgcHJvY2Vzcy5lbnYuRkFMX0tFWV9JRCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBwcm9jZXNzLmVudi5GQUxfS0VZX1NFQ1JFVCAhPT0gXCJ1bmRlZmluZWRcIikpKTtcbn1cbmNvbnN0IGNyZWRlbnRpYWxzRnJvbUVudiA9ICgpID0+IHtcbiAgICBpZiAoIWhhc0VudlZhcmlhYmxlcygpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuRkFMX0tFWSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuRkFMX0tFWTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkZBTF9LRVlfSURcbiAgICAgICAgPyBgJHtwcm9jZXNzLmVudi5GQUxfS0VZX0lEfToke3Byb2Nlc3MuZW52LkZBTF9LRVlfU0VDUkVUfWBcbiAgICAgICAgOiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0cy5jcmVkZW50aWFsc0Zyb21FbnYgPSBjcmVkZW50aWFsc0Zyb21FbnY7XG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgICBjcmVkZW50aWFsczogZXhwb3J0cy5jcmVkZW50aWFsc0Zyb21FbnYsXG4gICAgc3VwcHJlc3NMb2NhbENyZWRlbnRpYWxzV2FybmluZzogZmFsc2UsXG4gICAgcmVxdWVzdE1pZGRsZXdhcmU6IChyZXF1ZXN0KSA9PiBQcm9taXNlLnJlc29sdmUocmVxdWVzdCksXG4gICAgcmVzcG9uc2VIYW5kbGVyOiByZXNwb25zZV8xLmRlZmF1bHRSZXNwb25zZUhhbmRsZXIsXG59O1xuLyoqXG4gKiBDb25maWd1cmVzIHRoZSBmYWwgY2xpZW50LlxuICpcbiAqIEBwYXJhbSBjb25maWcgdGhlIG5ldyBjb25maWd1cmF0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb25maWcoY29uZmlnKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHKSwgY29uZmlnKSwgeyBmZXRjaDogKF9hID0gY29uZmlnLmZldGNoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZXNvbHZlRGVmYXVsdEZldGNoKCkgfSk7XG4gICAgaWYgKGNvbmZpZy5wcm94eVVybCkge1xuICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb25maWd1cmF0aW9uKSwgeyByZXF1ZXN0TWlkZGxld2FyZTogKDAsIG1pZGRsZXdhcmVfMS53aXRoTWlkZGxld2FyZSkoY29uZmlndXJhdGlvbi5yZXF1ZXN0TWlkZGxld2FyZSwgKDAsIG1pZGRsZXdhcmVfMS53aXRoUHJveHkpKHsgdGFyZ2V0VXJsOiBjb25maWcucHJveHlVcmwgfSkpIH0pO1xuICAgIH1cbiAgICBjb25zdCB7IGNyZWRlbnRpYWxzOiByZXNvbHZlQ3JlZGVudGlhbHMsIHN1cHByZXNzTG9jYWxDcmVkZW50aWFsc1dhcm5pbmcgfSA9IGNvbmZpZ3VyYXRpb247XG4gICAgY29uc3QgY3JlZGVudGlhbHMgPSB0eXBlb2YgcmVzb2x2ZUNyZWRlbnRpYWxzID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyByZXNvbHZlQ3JlZGVudGlhbHMoKVxuICAgICAgICA6IHJlc29sdmVDcmVkZW50aWFscztcbiAgICBpZiAoKDAsIHJ1bnRpbWVfMS5pc0Jyb3dzZXIpKCkgJiYgY3JlZGVudGlhbHMgJiYgIXN1cHByZXNzTG9jYWxDcmVkZW50aWFsc1dhcm5pbmcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGZhbCBjcmVkZW50aWFscyBhcmUgZXhwb3NlZCBpbiB0aGUgYnJvd3NlcidzIGVudmlyb25tZW50LiBcIiArXG4gICAgICAgICAgICBcIlRoYXQncyBub3QgcmVjb21tZW5kZWQgZm9yIHByb2R1Y3Rpb24gdXNlIGNhc2VzLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ3VyYXRpb247XG59XG4vKipcbiAqIEByZXR1cm5zIHRoZSBVUkwgb2YgdGhlIGZhbCBSRVNUIGFwaSBlbmRwb2ludC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVzdEFwaVVybCgpIHtcbiAgICByZXR1cm4gXCJodHRwczovL3Jlc3QuYWxwaGEuZmFsLmFpXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlZGVudGlhbHNGcm9tRW52IiwicmVzb2x2ZURlZmF1bHRGZXRjaCIsImNyZWF0ZUNvbmZpZyIsImdldFJlc3RBcGlVcmwiLCJtaWRkbGV3YXJlXzEiLCJyZXF1aXJlIiwicmVzcG9uc2VfMSIsInJ1bnRpbWVfMSIsImZldGNoIiwiRXJyb3IiLCJoYXNFbnZWYXJpYWJsZXMiLCJwcm9jZXNzIiwiZW52IiwiRkFMX0tFWSIsIkZBTF9LRVlfSUQiLCJGQUxfS0VZX1NFQ1JFVCIsInVuZGVmaW5lZCIsIkRFRkFVTFRfQ09ORklHIiwiY3JlZGVudGlhbHMiLCJzdXBwcmVzc0xvY2FsQ3JlZGVudGlhbHNXYXJuaW5nIiwicmVxdWVzdE1pZGRsZXdhcmUiLCJyZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXNwb25zZUhhbmRsZXIiLCJkZWZhdWx0UmVzcG9uc2VIYW5kbGVyIiwiY29uZmlnIiwiX2EiLCJjb25maWd1cmF0aW9uIiwiYXNzaWduIiwicHJveHlVcmwiLCJ3aXRoTWlkZGxld2FyZSIsIndpdGhQcm94eSIsInRhcmdldFVybCIsInJlc29sdmVDcmVkZW50aWFscyIsImlzQnJvd3NlciIsImNvbnNvbGUiLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fal = exports.parseEndpointId = exports.ValidationError = exports.ApiError = exports.withProxy = exports.withMiddleware = exports.createFalClient = void 0;\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@fal-ai/client/src/client.js\");\nvar client_2 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@fal-ai/client/src/client.js\");\nObject.defineProperty(exports, \"createFalClient\", ({\n    enumerable: true,\n    get: function() {\n        return client_2.createFalClient;\n    }\n}));\nvar middleware_1 = __webpack_require__(/*! ./middleware */ \"(rsc)/./node_modules/@fal-ai/client/src/middleware.js\");\nObject.defineProperty(exports, \"withMiddleware\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.withMiddleware;\n    }\n}));\nObject.defineProperty(exports, \"withProxy\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.withProxy;\n    }\n}));\nvar response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nObject.defineProperty(exports, \"ApiError\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ApiError;\n    }\n}));\nObject.defineProperty(exports, \"ValidationError\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ValidationError;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./types/common */ \"(rsc)/./node_modules/@fal-ai/client/src/types/common.js\"), exports);\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nObject.defineProperty(exports, \"parseEndpointId\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.parseEndpointId;\n    }\n}));\n/**\n * Creates a singleton instance of the client. This is useful as a compatibility\n * layer for existing code that uses the clients version prior to 1.0.0.\n */ exports.fal = function createSingletonFalClient() {\n    let currentInstance = (0, client_1.createFalClient)();\n    return {\n        config (config) {\n            currentInstance = (0, client_1.createFalClient)(config);\n        },\n        get queue () {\n            return currentInstance.queue;\n        },\n        get realtime () {\n            return currentInstance.realtime;\n        },\n        get storage () {\n            return currentInstance.storage;\n        },\n        get streaming () {\n            return currentInstance.streaming;\n        },\n        run (id, options) {\n            return currentInstance.run(id, options);\n        },\n        subscribe (endpointId, options) {\n            return currentInstance.subscribe(endpointId, options);\n        },\n        stream (endpointId, options) {\n            return currentInstance.stream(endpointId, options);\n        }\n    };\n}(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/middleware.js":
/*!*******************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/middleware.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TARGET_URL_HEADER = void 0;\nexports.withMiddleware = withMiddleware;\nexports.withProxy = withProxy;\n/**\n * Setup a execution chain of middleware functions.\n *\n * @param middlewares one or more middleware functions.\n * @returns a middleware function that executes the given middlewares in order.\n */ function withMiddleware(...middlewares) {\n    const isDefined = (middleware)=>typeof middleware === \"function\";\n    return (config)=>__awaiter(this, void 0, void 0, function*() {\n            let currentConfig = Object.assign({}, config);\n            for (const middleware of middlewares.filter(isDefined)){\n                currentConfig = yield middleware(currentConfig);\n            }\n            return currentConfig;\n        });\n}\nexports.TARGET_URL_HEADER = \"x-fal-target-url\";\nfunction withProxy(config) {\n    const passthrough = (requestConfig)=>Promise.resolve(requestConfig);\n    // when running on the server, we don't need to proxy the request\n    if (true) {\n        return passthrough;\n    }\n    // if x-fal-target-url is already set, we skip it\n    return (requestConfig)=>requestConfig.headers && exports.TARGET_URL_HEADER in requestConfig ? passthrough(requestConfig) : Promise.resolve(Object.assign(Object.assign({}, requestConfig), {\n            url: config.targetUrl,\n            headers: Object.assign(Object.assign({}, requestConfig.headers || {}), {\n                [exports.TARGET_URL_HEADER]: requestConfig.url\n            })\n        }));\n} //# sourceMappingURL=middleware.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL21pZGRsZXdhcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZLElBQUssSUFBSSxJQUFJLENBQUNBLFNBQVMsSUFBSyxTQUFVQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsQ0FBQyxFQUFFQyxTQUFTO0lBQ25GLFNBQVNDLE1BQU1DLEtBQUs7UUFBSSxPQUFPQSxpQkFBaUJILElBQUlHLFFBQVEsSUFBSUgsRUFBRSxTQUFVSSxPQUFPO1lBQUlBLFFBQVFEO1FBQVE7SUFBSTtJQUMzRyxPQUFPLElBQUtILENBQUFBLEtBQU1BLENBQUFBLElBQUlLLE9BQU0sQ0FBQyxFQUFHLFNBQVVELE9BQU8sRUFBRUUsTUFBTTtRQUNyRCxTQUFTQyxVQUFVSixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsVUFBVVEsSUFBSSxDQUFDTjtZQUFTLEVBQUUsT0FBT08sR0FBRztnQkFBRUosT0FBT0k7WUFBSTtRQUFFO1FBQzFGLFNBQVNDLFNBQVNSLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxTQUFTLENBQUMsUUFBUSxDQUFDRTtZQUFTLEVBQUUsT0FBT08sR0FBRztnQkFBRUosT0FBT0k7WUFBSTtRQUFFO1FBQzdGLFNBQVNGLEtBQUtJLE1BQU07WUFBSUEsT0FBT0MsSUFBSSxHQUFHVCxRQUFRUSxPQUFPVCxLQUFLLElBQUlELE1BQU1VLE9BQU9ULEtBQUssRUFBRVcsSUFBSSxDQUFDUCxXQUFXSTtRQUFXO1FBQzdHSCxLQUFLLENBQUNQLFlBQVlBLFVBQVVjLEtBQUssQ0FBQ2pCLFNBQVNDLGNBQWMsRUFBRSxHQUFHVSxJQUFJO0lBQ3RFO0FBQ0o7QUFDQU8sOENBQTZDO0lBQUViLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RlLHlCQUF5QixHQUFHLEtBQUs7QUFDakNBLHNCQUFzQixHQUFHRTtBQUN6QkYsaUJBQWlCLEdBQUdHO0FBQ3BCOzs7OztDQUtDLEdBQ0QsU0FBU0QsZUFBZSxHQUFHRSxXQUFXO0lBQ2xDLE1BQU1DLFlBQVksQ0FBQ0MsYUFBZSxPQUFPQSxlQUFlO0lBQ3hELE9BQU8sQ0FBQ0MsU0FBVzVCLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDL0MsSUFBSTZCLGdCQUFnQlYsT0FBT1csTUFBTSxDQUFDLENBQUMsR0FBR0Y7WUFDdEMsS0FBSyxNQUFNRCxjQUFjRixZQUFZTSxNQUFNLENBQUNMLFdBQVk7Z0JBQ3BERyxnQkFBZ0IsTUFBTUYsV0FBV0U7WUFDckM7WUFDQSxPQUFPQTtRQUNYO0FBQ0o7QUFDQVIseUJBQXlCLEdBQUc7QUFDNUIsU0FBU0csVUFBVUksTUFBTTtJQUNyQixNQUFNSSxjQUFjLENBQUNDLGdCQUFrQnpCLFFBQVFELE9BQU8sQ0FBQzBCO0lBQ3ZELGlFQUFpRTtJQUNqRSxJQUFJLElBQTZCLEVBQUU7UUFDL0IsT0FBT0Q7SUFDWDtJQUNBLGlEQUFpRDtJQUNqRCxPQUFPLENBQUNDLGdCQUFrQkEsY0FBY0MsT0FBTyxJQUFJYixRQUFRQyxpQkFBaUIsSUFBSVcsZ0JBQzFFRCxZQUFZQyxpQkFDWnpCLFFBQVFELE9BQU8sQ0FBQ1ksT0FBT1csTUFBTSxDQUFDWCxPQUFPVyxNQUFNLENBQUMsQ0FBQyxHQUFHRyxnQkFBZ0I7WUFBRUUsS0FBS1AsT0FBT1EsU0FBUztZQUFFRixTQUFTZixPQUFPVyxNQUFNLENBQUNYLE9BQU9XLE1BQU0sQ0FBQyxDQUFDLEdBQUlHLGNBQWNDLE9BQU8sSUFBSSxDQUFDLElBQUs7Z0JBQUUsQ0FBQ2IsUUFBUUMsaUJBQWlCLENBQUMsRUFBRVcsY0FBY0UsR0FBRztZQUFDO1FBQUc7QUFDaE8sRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tZW51LWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvbWlkZGxld2FyZS5qcz9lMDljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSID0gdm9pZCAwO1xuZXhwb3J0cy53aXRoTWlkZGxld2FyZSA9IHdpdGhNaWRkbGV3YXJlO1xuZXhwb3J0cy53aXRoUHJveHkgPSB3aXRoUHJveHk7XG4vKipcbiAqIFNldHVwIGEgZXhlY3V0aW9uIGNoYWluIG9mIG1pZGRsZXdhcmUgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSBtaWRkbGV3YXJlcyBvbmUgb3IgbW9yZSBtaWRkbGV3YXJlIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIGEgbWlkZGxld2FyZSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBtaWRkbGV3YXJlcyBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gd2l0aE1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpIHtcbiAgICBjb25zdCBpc0RlZmluZWQgPSAobWlkZGxld2FyZSkgPT4gdHlwZW9mIG1pZGRsZXdhcmUgPT09IFwiZnVuY3Rpb25cIjtcbiAgICByZXR1cm4gKGNvbmZpZykgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgY3VycmVudENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XG4gICAgICAgIGZvciAoY29uc3QgbWlkZGxld2FyZSBvZiBtaWRkbGV3YXJlcy5maWx0ZXIoaXNEZWZpbmVkKSkge1xuICAgICAgICAgICAgY3VycmVudENvbmZpZyA9IHlpZWxkIG1pZGRsZXdhcmUoY3VycmVudENvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDb25maWc7XG4gICAgfSk7XG59XG5leHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSID0gXCJ4LWZhbC10YXJnZXQtdXJsXCI7XG5mdW5jdGlvbiB3aXRoUHJveHkoY29uZmlnKSB7XG4gICAgY29uc3QgcGFzc3Rocm91Z2ggPSAocmVxdWVzdENvbmZpZykgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3RDb25maWcpO1xuICAgIC8vIHdoZW4gcnVubmluZyBvbiB0aGUgc2VydmVyLCB3ZSBkb24ndCBuZWVkIHRvIHByb3h5IHRoZSByZXF1ZXN0XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhc3N0aHJvdWdoO1xuICAgIH1cbiAgICAvLyBpZiB4LWZhbC10YXJnZXQtdXJsIGlzIGFscmVhZHkgc2V0LCB3ZSBza2lwIGl0XG4gICAgcmV0dXJuIChyZXF1ZXN0Q29uZmlnKSA9PiByZXF1ZXN0Q29uZmlnLmhlYWRlcnMgJiYgZXhwb3J0cy5UQVJHRVRfVVJMX0hFQURFUiBpbiByZXF1ZXN0Q29uZmlnXG4gICAgICAgID8gcGFzc3Rocm91Z2gocmVxdWVzdENvbmZpZylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0Q29uZmlnKSwgeyB1cmw6IGNvbmZpZy50YXJnZXRVcmwsIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKHJlcXVlc3RDb25maWcuaGVhZGVycyB8fCB7fSkpLCB7IFtleHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSXTogcmVxdWVzdENvbmZpZy51cmwgfSkgfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlkZGxld2FyZS5qcy5tYXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiVEFSR0VUX1VSTF9IRUFERVIiLCJ3aXRoTWlkZGxld2FyZSIsIndpdGhQcm94eSIsIm1pZGRsZXdhcmVzIiwiaXNEZWZpbmVkIiwibWlkZGxld2FyZSIsImNvbmZpZyIsImN1cnJlbnRDb25maWciLCJhc3NpZ24iLCJmaWx0ZXIiLCJwYXNzdGhyb3VnaCIsInJlcXVlc3RDb25maWciLCJoZWFkZXJzIiwidXJsIiwidGFyZ2V0VXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/middleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/queue.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/queue.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = this && this.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createQueueClient = void 0;\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/@fal-ai/client/src/streaming.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nconst DEFAULT_POLL_INTERVAL = 500;\nconst createQueueClient = ({ config, storage })=>{\n    const ref = {\n        submit (endpointId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const { webhookUrl, priority } = options, runOptions = __rest(options, [\n                    \"webhookUrl\",\n                    \"priority\"\n                ]);\n                const input = options.input ? yield storage.transformInput(options.input) : undefined;\n                return (0, request_1.dispatchRequest)({\n                    method: options.method,\n                    targetUrl: (0, request_1.buildUrl)(endpointId, Object.assign(Object.assign({}, runOptions), {\n                        subdomain: \"queue\",\n                        query: webhookUrl ? {\n                            fal_webhook: webhookUrl\n                        } : undefined\n                    })),\n                    headers: {\n                        \"x-fal-queue-priority\": priority !== null && priority !== void 0 ? priority : \"normal\"\n                    },\n                    input: input,\n                    config,\n                    options: {\n                        signal: options.abortSignal\n                    }\n                });\n            });\n        },\n        status (endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function*(endpointId, { requestId, logs = false, abortSignal }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                return (0, request_1.dispatchRequest)({\n                    method: \"get\",\n                    targetUrl: (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                        subdomain: \"queue\",\n                        query: {\n                            logs: logs ? \"1\" : \"0\"\n                        },\n                        path: `/requests/${requestId}/status`\n                    }),\n                    config,\n                    options: {\n                        signal: abortSignal\n                    }\n                });\n            });\n        },\n        streamStatus (endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function*(endpointId, { requestId, logs = false, connectionMode }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                const queryParams = {\n                    logs: logs ? \"1\" : \"0\"\n                };\n                const url = (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                    subdomain: \"queue\",\n                    path: `/requests/${requestId}/status/stream`,\n                    query: queryParams\n                });\n                return new streaming_1.FalStream(endpointId, config, {\n                    url,\n                    method: \"get\",\n                    connectionMode,\n                    queryParams\n                });\n            });\n        },\n        subscribeToStatus (endpointId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const requestId = options.requestId;\n                const timeout = options.timeout;\n                let timeoutId = undefined;\n                const handleCancelError = ()=>{\n                // Ignore errors as the client will follow through with the timeout\n                // regardless of the server response. In case cancelation fails, we\n                // still want to reject the promise and consider the client call canceled.\n                };\n                if (options.mode === \"streaming\") {\n                    const status = yield ref.streamStatus(endpointId, {\n                        requestId,\n                        logs: options.logs,\n                        connectionMode: \"connectionMode\" in options ? options.connectionMode : undefined\n                    });\n                    const logs = [];\n                    if (timeout) {\n                        timeoutId = setTimeout(()=>{\n                            status.abort();\n                            ref.cancel(endpointId, {\n                                requestId\n                            }).catch(handleCancelError);\n                            // TODO this error cannot bubble up to the user since it's thrown in\n                            // a closure in the global scope due to setTimeout behavior.\n                            // User will get a platform error instead. We should find a way to\n                            // make this behavior aligned with polling.\n                            throw new Error(`Client timed out waiting for the request to complete after ${timeout}ms`);\n                        }, timeout);\n                    }\n                    status.on(\"data\", (data)=>{\n                        if (options.onQueueUpdate) {\n                            // accumulate logs to match previous polling behavior\n                            if (\"logs\" in data && Array.isArray(data.logs) && data.logs.length > 0) {\n                                logs.push(...data.logs);\n                            }\n                            options.onQueueUpdate(\"logs\" in data ? Object.assign(Object.assign({}, data), {\n                                logs\n                            }) : data);\n                        }\n                    });\n                    const doneStatus = yield status.done();\n                    if (timeoutId) {\n                        clearTimeout(timeoutId);\n                    }\n                    return doneStatus;\n                }\n                // default to polling until status streaming is stable and faster\n                return new Promise((resolve, reject)=>{\n                    var _a;\n                    let pollingTimeoutId;\n                    // type resolution isn't great in this case, so check for its presence\n                    // and and type so the typechecker behaves as expected\n                    const pollInterval = \"pollInterval\" in options && typeof options.pollInterval === \"number\" ? (_a = options.pollInterval) !== null && _a !== void 0 ? _a : DEFAULT_POLL_INTERVAL : DEFAULT_POLL_INTERVAL;\n                    const clearScheduledTasks = ()=>{\n                        if (timeoutId) {\n                            clearTimeout(timeoutId);\n                        }\n                        if (pollingTimeoutId) {\n                            clearTimeout(pollingTimeoutId);\n                        }\n                    };\n                    if (timeout) {\n                        timeoutId = setTimeout(()=>{\n                            clearScheduledTasks();\n                            ref.cancel(endpointId, {\n                                requestId\n                            }).catch(handleCancelError);\n                            reject(new Error(`Client timed out waiting for the request to complete after ${timeout}ms`));\n                        }, timeout);\n                    }\n                    const poll = ()=>__awaiter(this, void 0, void 0, function*() {\n                            var _a;\n                            try {\n                                const requestStatus = yield ref.status(endpointId, {\n                                    requestId,\n                                    logs: (_a = options.logs) !== null && _a !== void 0 ? _a : false,\n                                    abortSignal: options.abortSignal\n                                });\n                                if (options.onQueueUpdate) {\n                                    options.onQueueUpdate(requestStatus);\n                                }\n                                if (requestStatus.status === \"COMPLETED\") {\n                                    clearScheduledTasks();\n                                    resolve(requestStatus);\n                                    return;\n                                }\n                                pollingTimeoutId = setTimeout(poll, pollInterval);\n                            } catch (error) {\n                                clearScheduledTasks();\n                                reject(error);\n                            }\n                        });\n                    poll().catch(reject);\n                });\n            });\n        },\n        result (endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function*(endpointId, { requestId, abortSignal }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                return (0, request_1.dispatchRequest)({\n                    method: \"get\",\n                    targetUrl: (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                        subdomain: \"queue\",\n                        path: `/requests/${requestId}`\n                    }),\n                    config: Object.assign(Object.assign({}, config), {\n                        responseHandler: response_1.resultResponseHandler\n                    }),\n                    options: {\n                        signal: abortSignal\n                    }\n                });\n            });\n        },\n        cancel (endpointId_1, _a) {\n            return __awaiter(this, arguments, void 0, function*(endpointId, { requestId, abortSignal }) {\n                const appId = (0, utils_1.parseEndpointId)(endpointId);\n                const prefix = appId.namespace ? `${appId.namespace}/` : \"\";\n                yield (0, request_1.dispatchRequest)({\n                    method: \"put\",\n                    targetUrl: (0, request_1.buildUrl)(`${prefix}${appId.owner}/${appId.alias}`, {\n                        subdomain: \"queue\",\n                        path: `/requests/${requestId}/cancel`\n                    }),\n                    config,\n                    options: {\n                        signal: abortSignal\n                    }\n                });\n            });\n        }\n    };\n    return ref;\n};\nexports.createQueueClient = createQueueClient; //# sourceMappingURL=queue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/queue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/realtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/realtime.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createRealtimeClient = createRealtimeClient;\n/* eslint-disable @typescript-eslint/no-explicit-any */ const msgpack_1 = __webpack_require__(/*! @msgpack/msgpack */ \"(rsc)/./node_modules/@msgpack/msgpack/dist.es5+esm/index.mjs\");\nconst robot3_1 = __webpack_require__(/*! robot3 */ \"(rsc)/./node_modules/robot3/dist/machine.js\");\nconst auth_1 = __webpack_require__(/*! ./auth */ \"(rsc)/./node_modules/@fal-ai/client/src/auth.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/./node_modules/@fal-ai/client/src/runtime.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nconst initialState = ()=>({\n        enqueuedMessage: undefined\n    });\nfunction hasToken(context) {\n    return context.token !== undefined;\n}\nfunction noToken(context) {\n    return !hasToken(context);\n}\nfunction enqueueMessage(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        enqueuedMessage: event.message\n    });\n}\nfunction closeConnection(context) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        context.websocket.close();\n    }\n    return Object.assign(Object.assign({}, context), {\n        websocket: undefined\n    });\n}\nfunction sendMessage(context, event) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        if (event.message instanceof Uint8Array) {\n            context.websocket.send(event.message);\n        } else {\n            context.websocket.send((0, msgpack_1.encode)(event.message));\n        }\n        return Object.assign(Object.assign({}, context), {\n            enqueuedMessage: undefined\n        });\n    }\n    return Object.assign(Object.assign({}, context), {\n        enqueuedMessage: event.message\n    });\n}\nfunction expireToken(context) {\n    return Object.assign(Object.assign({}, context), {\n        token: undefined\n    });\n}\nfunction setToken(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        token: event.token\n    });\n}\nfunction connectionEstablished(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        websocket: event.websocket\n    });\n}\n// State machine\nconst connectionStateMachine = (0, robot3_1.createMachine)(\"idle\", {\n    idle: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"expireToken\", \"idle\", (0, robot3_1.reduce)(expireToken)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    connecting: (0, robot3_1.state)((0, robot3_1.transition)(\"connecting\", \"connecting\"), (0, robot3_1.transition)(\"connected\", \"active\", (0, robot3_1.reduce)(connectionEstablished)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.immediate)(\"authRequired\", (0, robot3_1.guard)(noToken))),\n    authRequired: (0, robot3_1.state)((0, robot3_1.transition)(\"initiateAuth\", \"authInProgress\"), (0, robot3_1.transition)(\"send\", \"authRequired\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    authInProgress: (0, robot3_1.state)((0, robot3_1.transition)(\"authenticated\", \"connecting\", (0, robot3_1.reduce)(setToken)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken), (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"authInProgress\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    active: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"active\", (0, robot3_1.reduce)(sendMessage)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    failed: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"failed\"), (0, robot3_1.transition)(\"close\", \"idle\", (0, robot3_1.reduce)(closeConnection)))\n}, initialState);\nfunction buildRealtimeUrl(app, { token, maxBuffering }) {\n    if (maxBuffering !== undefined && (maxBuffering < 1 || maxBuffering > 60)) {\n        throw new Error(\"The `maxBuffering` must be between 1 and 60 (inclusive)\");\n    }\n    const queryParams = new URLSearchParams({\n        fal_jwt_token: token\n    });\n    if (maxBuffering !== undefined) {\n        queryParams.set(\"max_buffering\", maxBuffering.toFixed(0));\n    }\n    const appId = (0, utils_1.ensureEndpointIdFormat)(app);\n    return `wss://fal.run/${appId}/realtime?${queryParams.toString()}`;\n}\nconst DEFAULT_THROTTLE_INTERVAL = 128;\nfunction isUnauthorizedError(message) {\n    // TODO we need better protocol definition with error codes\n    return message[\"status\"] === \"error\" && message[\"error\"] === \"Unauthorized\";\n}\n/**\n * See https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n */ const WebSocketErrorCodes = {\n    NORMAL_CLOSURE: 1000,\n    GOING_AWAY: 1001\n};\nconst connectionCache = new Map();\nconst connectionCallbacks = new Map();\nfunction reuseInterpreter(key, throttleInterval, onChange) {\n    if (!connectionCache.has(key)) {\n        const machine = (0, robot3_1.interpret)(connectionStateMachine, onChange);\n        connectionCache.set(key, Object.assign(Object.assign({}, machine), {\n            throttledSend: throttleInterval > 0 ? (0, utils_1.throttle)(machine.send, throttleInterval, true) : machine.send\n        }));\n    }\n    return connectionCache.get(key);\n}\nconst noop = ()=>{\n/* No-op */ };\n/**\n * A no-op connection that does not send any message.\n * Useful on the frameworks that reuse code for both ssr and csr (e.g. Next)\n * so the call when doing ssr has no side-effects.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NoOpConnection = {\n    send: noop,\n    close: noop\n};\nfunction isSuccessfulResult(data) {\n    return data.status !== \"error\" && data.type !== \"x-fal-message\" && !isFalErrorResult(data);\n}\nfunction isFalErrorResult(data) {\n    return data.type === \"x-fal-error\";\n}\nfunction createRealtimeClient({ config }) {\n    return {\n        connect (app, handler) {\n            const { // if running on React in the server, set clientOnly to true by default\n            clientOnly = (0, utils_1.isReact)() && !(0, runtime_1.isBrowser)(), connectionKey = crypto.randomUUID(), maxBuffering, throttleInterval = DEFAULT_THROTTLE_INTERVAL } = handler;\n            if (clientOnly && !(0, runtime_1.isBrowser)()) {\n                return NoOpConnection;\n            }\n            let previousState;\n            // Although the state machine is cached so we don't open multiple connections,\n            // we still need to update the callbacks so we can call the correct references\n            // when the state machine is reused. This is needed because the callbacks\n            // are passed as part of the handler object, which can be different across\n            // different calls to `connect`.\n            connectionCallbacks.set(connectionKey, {\n                onError: handler.onError,\n                onResult: handler.onResult\n            });\n            const getCallbacks = ()=>connectionCallbacks.get(connectionKey);\n            const stateMachine = reuseInterpreter(connectionKey, throttleInterval, ({ context, machine, send })=>{\n                const { enqueuedMessage, token } = context;\n                if (machine.current === \"active\" && enqueuedMessage) {\n                    send({\n                        type: \"send\",\n                        message: enqueuedMessage\n                    });\n                }\n                if (machine.current === \"authRequired\" && token === undefined && previousState !== machine.current) {\n                    send({\n                        type: \"initiateAuth\"\n                    });\n                    (0, auth_1.getTemporaryAuthToken)(app, config).then((token)=>{\n                        send({\n                            type: \"authenticated\",\n                            token\n                        });\n                        const tokenExpirationTimeout = Math.round(auth_1.TOKEN_EXPIRATION_SECONDS * 0.9 * 1000);\n                        setTimeout(()=>{\n                            send({\n                                type: \"expireToken\"\n                            });\n                        }, tokenExpirationTimeout);\n                    }).catch((error)=>{\n                        send({\n                            type: \"unauthorized\",\n                            error\n                        });\n                    });\n                }\n                if (machine.current === \"connecting\" && previousState !== machine.current && token !== undefined) {\n                    const ws = new WebSocket(buildRealtimeUrl(app, {\n                        token,\n                        maxBuffering\n                    }));\n                    ws.onopen = ()=>{\n                        send({\n                            type: \"connected\",\n                            websocket: ws\n                        });\n                    };\n                    ws.onclose = (event)=>{\n                        if (event.code !== WebSocketErrorCodes.NORMAL_CLOSURE) {\n                            const { onError = noop } = getCallbacks();\n                            onError(new response_1.ApiError({\n                                message: `Error closing the connection: ${event.reason}`,\n                                status: event.code\n                            }));\n                        }\n                        send({\n                            type: \"connectionClosed\",\n                            code: event.code\n                        });\n                    };\n                    ws.onerror = (event)=>{\n                        // TODO specify error protocol for identified errors\n                        const { onError = noop } = getCallbacks();\n                        onError(new response_1.ApiError({\n                            message: \"Unknown error\",\n                            status: 500\n                        }));\n                    };\n                    ws.onmessage = (event)=>{\n                        const { onResult } = getCallbacks();\n                        // Handle binary messages as msgpack messages\n                        if (event.data instanceof ArrayBuffer) {\n                            const result = (0, msgpack_1.decode)(new Uint8Array(event.data));\n                            onResult(result);\n                            return;\n                        }\n                        if (event.data instanceof Uint8Array) {\n                            const result = (0, msgpack_1.decode)(event.data);\n                            onResult(result);\n                            return;\n                        }\n                        if (event.data instanceof Blob) {\n                            event.data.arrayBuffer().then((buffer)=>{\n                                const result = (0, msgpack_1.decode)(new Uint8Array(buffer));\n                                onResult(result);\n                            });\n                            return;\n                        }\n                        // Otherwise handle strings as plain JSON messages\n                        const data = JSON.parse(event.data);\n                        // Drop messages that are not related to the actual result.\n                        // In the future, we might want to handle other types of messages.\n                        // TODO: specify the fal ws protocol format\n                        if (isUnauthorizedError(data)) {\n                            send({\n                                type: \"unauthorized\",\n                                error: new Error(\"Unauthorized\")\n                            });\n                            return;\n                        }\n                        if (isSuccessfulResult(data)) {\n                            onResult(data);\n                            return;\n                        }\n                        if (isFalErrorResult(data)) {\n                            if (data.error === \"TIMEOUT\") {\n                                // Timeout error messages just indicate that the connection hasn't\n                                // received an incoming message for a while. We don't need to\n                                // handle them as errors.\n                                return;\n                            }\n                            const { onError = noop } = getCallbacks();\n                            onError(new response_1.ApiError({\n                                message: `${data.error}: ${data.reason}`,\n                                // TODO better error status code\n                                status: 400,\n                                body: data\n                            }));\n                            return;\n                        }\n                    };\n                }\n                previousState = machine.current;\n            });\n            const send = (input)=>{\n                // Use throttled send to avoid sending too many messages\n                stateMachine.throttledSend({\n                    type: \"send\",\n                    message: input\n                });\n            };\n            const close = ()=>{\n                stateMachine.send({\n                    type: \"close\"\n                });\n            };\n            return {\n                send,\n                close\n            };\n        }\n    };\n} //# sourceMappingURL=realtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/realtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/request.js":
/*!****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/request.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = this && this.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dispatchRequest = dispatchRequest;\nexports.buildUrl = buildUrl;\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(rsc)/./node_modules/@fal-ai/client/src/runtime.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\nconst isCloudflareWorkers = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === \"Cloudflare-Workers\";\nfunction dispatchRequest(params) {\n    return __awaiter(this, void 0, void 0, function*() {\n        var _a, _b, _c;\n        const { targetUrl, input, config, options = {} } = params;\n        const { credentials: credentialsValue, requestMiddleware, responseHandler, fetch } = config;\n        const userAgent = (0, runtime_1.isBrowser)() ? {} : {\n            \"User-Agent\": (0, runtime_1.getUserAgent)()\n        };\n        const credentials = typeof credentialsValue === \"function\" ? credentialsValue() : credentialsValue;\n        const { method, url, headers } = yield requestMiddleware({\n            method: ((_b = (_a = params.method) !== null && _a !== void 0 ? _a : options.method) !== null && _b !== void 0 ? _b : \"post\").toUpperCase(),\n            url: targetUrl,\n            headers: params.headers\n        });\n        const authHeader = credentials ? {\n            Authorization: `Key ${credentials}`\n        } : {};\n        const requestHeaders = Object.assign(Object.assign(Object.assign(Object.assign({}, authHeader), {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }), userAgent), headers !== null && headers !== void 0 ? headers : {});\n        const { responseHandler: customResponseHandler } = options, requestInit = __rest(options, [\n            \"responseHandler\"\n        ]);\n        const response = yield fetch(url, Object.assign(Object.assign(Object.assign(Object.assign({}, requestInit), {\n            method,\n            headers: Object.assign(Object.assign({}, requestHeaders), (_c = requestInit.headers) !== null && _c !== void 0 ? _c : {})\n        }), !isCloudflareWorkers && {\n            mode: \"cors\"\n        }), {\n            signal: options.signal,\n            body: method.toLowerCase() !== \"get\" && input ? JSON.stringify(input) : undefined\n        }));\n        const handleResponse = customResponseHandler !== null && customResponseHandler !== void 0 ? customResponseHandler : responseHandler;\n        return yield handleResponse(response);\n    });\n}\n/**\n * Builds the final url to run the function based on its `id` or alias and\n * a the options from `RunOptions<Input>`.\n *\n * @private\n * @param id the function id or alias\n * @param options the run options\n * @returns the final url to run the function\n */ function buildUrl(id, options = {}) {\n    var _a, _b;\n    const method = ((_a = options.method) !== null && _a !== void 0 ? _a : \"post\").toLowerCase();\n    const path = ((_b = options.path) !== null && _b !== void 0 ? _b : \"\").replace(/^\\//, \"\").replace(/\\/{2,}/, \"/\");\n    const input = options.input;\n    const params = Object.assign(Object.assign({}, options.query || {}), method === \"get\" ? input : {});\n    const queryParams = Object.keys(params).length > 0 ? `?${new URLSearchParams(params).toString()}` : \"\";\n    // if a fal url is passed, just use it\n    if ((0, utils_1.isValidUrl)(id)) {\n        const url = id.endsWith(\"/\") ? id : `${id}/`;\n        return `${url}${path}${queryParams}`;\n    }\n    const appId = (0, utils_1.ensureEndpointIdFormat)(id);\n    const subdomain = options.subdomain ? `${options.subdomain}.` : \"\";\n    const url = `https://${subdomain}fal.run/${appId}/${path}`;\n    return `${url.replace(/\\/$/, \"\")}${queryParams}`;\n} //# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/response.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/response.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValidationError = exports.ApiError = void 0;\nexports.defaultResponseHandler = defaultResponseHandler;\nexports.resultResponseHandler = resultResponseHandler;\nconst REQUEST_ID_HEADER = \"x-fal-request-id\";\nclass ApiError extends Error {\n    constructor({ message, status, body }){\n        super(message);\n        this.name = \"ApiError\";\n        this.status = status;\n        this.body = body;\n    }\n}\nexports.ApiError = ApiError;\nclass ValidationError extends ApiError {\n    constructor(args){\n        super(args);\n        this.name = \"ValidationError\";\n    }\n    get fieldErrors() {\n        // NOTE: this is a hack to support both FastAPI/Pydantic errors\n        // and some custom 422 errors that might not be in the Pydantic format.\n        if (typeof this.body.detail === \"string\") {\n            return [\n                {\n                    loc: [\n                        \"body\"\n                    ],\n                    msg: this.body.detail,\n                    type: \"value_error\"\n                }\n            ];\n        }\n        return this.body.detail || [];\n    }\n    getFieldErrors(field) {\n        return this.fieldErrors.filter((error)=>error.loc[error.loc.length - 1] === field);\n    }\n}\nexports.ValidationError = ValidationError;\nfunction defaultResponseHandler(response) {\n    return __awaiter(this, void 0, void 0, function*() {\n        var _a;\n        const { status, statusText } = response;\n        const contentType = (_a = response.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"\";\n        if (!response.ok) {\n            if (contentType.includes(\"application/json\")) {\n                const body = yield response.json();\n                const ErrorType = status === 422 ? ValidationError : ApiError;\n                throw new ErrorType({\n                    message: body.message || statusText,\n                    status,\n                    body\n                });\n            }\n            throw new ApiError({\n                message: `HTTP ${status}: ${statusText}`,\n                status\n            });\n        }\n        if (contentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        if (contentType.includes(\"text/html\")) {\n            return response.text();\n        }\n        if (contentType.includes(\"application/octet-stream\")) {\n            return response.arrayBuffer();\n        }\n        // TODO convert to either number or bool automatically\n        return response.text();\n    });\n}\nfunction resultResponseHandler(response) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const data = yield defaultResponseHandler(response);\n        return {\n            data,\n            requestId: response.headers.get(REQUEST_ID_HEADER) || \"\"\n        };\n    });\n} //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/runtime.js":
/*!****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/runtime.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable @typescript-eslint/no-var-requires */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = isBrowser;\nexports.getUserAgent = getUserAgent;\nfunction isBrowser() {\n    return  false && 0;\n}\nlet memoizedUserAgent = null;\nfunction getUserAgent() {\n    if (memoizedUserAgent !== null) {\n        return memoizedUserAgent;\n    }\n    const packageInfo = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@fal-ai/client/package.json\");\n    memoizedUserAgent = `${packageInfo.name}/${packageInfo.version}`;\n    return memoizedUserAgent;\n} //# sourceMappingURL=runtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3J1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixxREFBcUQsR0FDckRBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0U7QUFDcEJGLG9CQUFvQixHQUFHRztBQUN2QixTQUFTRDtJQUNMLE9BQVEsTUFBNkIsSUFBSSxDQUFzQztBQUNuRjtBQUNBLElBQUlJLG9CQUFvQjtBQUN4QixTQUFTSDtJQUNMLElBQUlHLHNCQUFzQixNQUFNO1FBQzVCLE9BQU9BO0lBQ1g7SUFDQSxNQUFNQyxjQUFjQyxtQkFBT0EsQ0FBQyx5RUFBaUI7SUFDN0NGLG9CQUFvQixDQUFDLEVBQUVDLFlBQVlFLElBQUksQ0FBQyxDQUFDLEVBQUVGLFlBQVlHLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLE9BQU9KO0FBQ1gsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tZW51LWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZmFsLWFpL2NsaWVudC9zcmMvcnVudGltZS5qcz9hNmVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG5leHBvcnRzLmdldFVzZXJBZ2VudCA9IGdldFVzZXJBZ2VudDtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5sZXQgbWVtb2l6ZWRVc2VyQWdlbnQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50KCkge1xuICAgIGlmIChtZW1vaXplZFVzZXJBZ2VudCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbWVtb2l6ZWRVc2VyQWdlbnQ7XG4gICAgfVxuICAgIGNvbnN0IHBhY2thZ2VJbmZvID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKTtcbiAgICBtZW1vaXplZFVzZXJBZ2VudCA9IGAke3BhY2thZ2VJbmZvLm5hbWV9LyR7cGFja2FnZUluZm8udmVyc2lvbn1gO1xuICAgIHJldHVybiBtZW1vaXplZFVzZXJBZ2VudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bnRpbWUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyIiwiZ2V0VXNlckFnZW50Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZW1vaXplZFVzZXJBZ2VudCIsInBhY2thZ2VJbmZvIiwicmVxdWlyZSIsIm5hbWUiLCJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/storage.js":
/*!****************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/storage.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createStorageClient = createStorageClient;\nconst config_1 = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/@fal-ai/client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@fal-ai/client/src/utils.js\");\n/**\n * Get the file extension from the content type. This is used to generate\n * a file name if the file name is not provided.\n *\n * @param contentType the content type of the file.\n * @returns the file extension or `bin` if the content type is not recognized.\n */ function getExtensionFromContentType(contentType) {\n    var _a;\n    const [_, fileType] = contentType.split(\"/\");\n    return (_a = fileType.split(/[-;]/)[0]) !== null && _a !== void 0 ? _a : \"bin\";\n}\n/**\n * Initiate the upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n */ function initiateUpload(file, config, contentType) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n        return yield (0, request_1.dispatchRequest)({\n            method: \"POST\",\n            // NOTE: We want to test V3 without making it the default at the API level\n            targetUrl: `${(0, config_1.getRestApiUrl)()}/storage/upload/initiate?storage_type=fal-cdn-v3`,\n            input: {\n                content_type: contentType,\n                file_name: filename\n            },\n            config\n        });\n    });\n}\n/**\n * Initiate the multipart upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n */ function initiateMultipartUpload(file, config, contentType) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n        return yield (0, request_1.dispatchRequest)({\n            method: \"POST\",\n            targetUrl: `${(0, config_1.getRestApiUrl)()}/storage/upload/initiate-multipart?storage_type=fal-cdn-v3`,\n            input: {\n                content_type: contentType,\n                file_name: filename\n            },\n            config\n        });\n    });\n}\nfunction partUploadRetries(uploadUrl_1, chunk_1, config_2) {\n    return __awaiter(this, arguments, void 0, function*(uploadUrl, chunk, config, tries = 3) {\n        if (tries === 0) {\n            throw new Error(\"Part upload failed, retries exhausted\");\n        }\n        const { fetch, responseHandler } = config;\n        try {\n            const response = yield fetch(uploadUrl, {\n                method: \"PUT\",\n                body: chunk\n            });\n            return yield responseHandler(response);\n        } catch (error) {\n            return yield partUploadRetries(uploadUrl, chunk, config, tries - 1);\n        }\n    });\n}\nfunction multipartUpload(file, config) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const { fetch, responseHandler } = config;\n        const contentType = file.type || \"application/octet-stream\";\n        const { upload_url: uploadUrl, file_url: url } = yield initiateMultipartUpload(file, config, contentType);\n        // Break the file into 10MB chunks\n        const chunkSize = 10 * 1024 * 1024;\n        const chunks = Math.ceil(file.size / chunkSize);\n        const parsedUrl = new URL(uploadUrl);\n        const responses = [];\n        for(let i = 0; i < chunks; i++){\n            const start = i * chunkSize;\n            const end = Math.min(start + chunkSize, file.size);\n            const chunk = file.slice(start, end);\n            const partNumber = i + 1;\n            // {uploadUrl}/{part_number}?uploadUrlParams=...\n            const partUploadUrl = `${parsedUrl.origin}${parsedUrl.pathname}/${partNumber}${parsedUrl.search}`;\n            responses.push((yield partUploadRetries(partUploadUrl, chunk, config)));\n        }\n        // Complete the upload\n        const completeUrl = `${parsedUrl.origin}${parsedUrl.pathname}/complete${parsedUrl.search}`;\n        const response = yield fetch(completeUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                parts: responses.map((mpart)=>({\n                        partNumber: mpart.partNumber,\n                        etag: mpart.etag\n                    }))\n            })\n        });\n        yield responseHandler(response);\n        return url;\n    });\n}\nfunction createStorageClient({ config }) {\n    const ref = {\n        upload: (file)=>__awaiter(this, void 0, void 0, function*() {\n                // Check for 90+ MB file size to do multipart upload\n                if (file.size > 90 * 1024 * 1024) {\n                    return yield multipartUpload(file, config);\n                }\n                const contentType = file.type || \"application/octet-stream\";\n                const { fetch, responseHandler } = config;\n                const { upload_url: uploadUrl, file_url: url } = yield initiateUpload(file, config, contentType);\n                const response = yield fetch(uploadUrl, {\n                    method: \"PUT\",\n                    body: file,\n                    headers: {\n                        \"Content-Type\": file.type || \"application/octet-stream\"\n                    }\n                });\n                yield responseHandler(response);\n                return url;\n            }),\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        transformInput: (input)=>__awaiter(this, void 0, void 0, function*() {\n                if (Array.isArray(input)) {\n                    return Promise.all(input.map((item)=>ref.transformInput(item)));\n                } else if (input instanceof Blob) {\n                    return yield ref.upload(input);\n                } else if ((0, utils_1.isPlainObject)(input)) {\n                    const inputObject = input;\n                    const promises = Object.entries(inputObject).map((_a)=>__awaiter(this, [\n                            _a\n                        ], void 0, function*([key, value]) {\n                            return [\n                                key,\n                                (yield ref.transformInput(value))\n                            ];\n                        }));\n                    const results = yield Promise.all(promises);\n                    return Object.fromEntries(results);\n                }\n                // Return the input as is if it's neither an object nor a file/blob/data URI\n                return input;\n            })\n    };\n    return ref;\n} //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/streaming.js":
/*!******************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/streaming.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = this && this.__await || function(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator = this && this.__asyncGenerator || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FalStream = void 0;\nexports.createStreamingClient = createStreamingClient;\nconst eventsource_parser_1 = __webpack_require__(/*! eventsource-parser */ \"(rsc)/./node_modules/@fal-ai/client/node_modules/eventsource-parser/dist/index.cjs\");\nconst auth_1 = __webpack_require__(/*! ./auth */ \"(rsc)/./node_modules/@fal-ai/client/src/auth.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/@fal-ai/client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@fal-ai/client/src/response.js\");\nconst CONTENT_TYPE_EVENT_STREAM = \"text/event-stream\";\nconst EVENT_STREAM_TIMEOUT = 15 * 1000;\n/**\n * The class representing a streaming response. With t\n */ class FalStream {\n    constructor(endpointId, config, options){\n        var _a;\n        // support for event listeners\n        this.listeners = new Map();\n        this.buffer = [];\n        // local state\n        this.currentData = undefined;\n        this.lastEventTimestamp = 0;\n        this.streamClosed = false;\n        this.abortController = new AbortController();\n        this.start = ()=>__awaiter(this, void 0, void 0, function*() {\n                var _a, _b;\n                const { endpointId, options } = this;\n                const { input, method = \"post\", connectionMode = \"server\" } = options;\n                try {\n                    if (connectionMode === \"client\") {\n                        // if we are in the browser, we need to get a temporary token\n                        // to authenticate the request\n                        const token = yield (0, auth_1.getTemporaryAuthToken)(endpointId, this.config);\n                        const { fetch } = this.config;\n                        const parsedUrl = new URL(this.url);\n                        parsedUrl.searchParams.set(\"fal_jwt_token\", token);\n                        const response = yield fetch(parsedUrl.toString(), {\n                            method: method.toUpperCase(),\n                            headers: {\n                                accept: (_a = options.accept) !== null && _a !== void 0 ? _a : CONTENT_TYPE_EVENT_STREAM,\n                                \"content-type\": \"application/json\"\n                            },\n                            body: input && method !== \"get\" ? JSON.stringify(input) : undefined,\n                            signal: this.abortController.signal\n                        });\n                        return yield this.handleResponse(response);\n                    }\n                    return yield (0, request_1.dispatchRequest)({\n                        method: method.toUpperCase(),\n                        targetUrl: this.url,\n                        input,\n                        config: this.config,\n                        options: {\n                            headers: {\n                                accept: (_b = options.accept) !== null && _b !== void 0 ? _b : CONTENT_TYPE_EVENT_STREAM\n                            },\n                            responseHandler: this.handleResponse,\n                            signal: this.abortController.signal\n                        }\n                    });\n                } catch (error) {\n                    this.handleError(error);\n                }\n            });\n        this.handleResponse = (response)=>__awaiter(this, void 0, void 0, function*() {\n                var _a, _b;\n                if (!response.ok) {\n                    try {\n                        // we know the response failed, call the response handler\n                        // so the exception gets converted to ApiError correctly\n                        yield (0, response_1.defaultResponseHandler)(response);\n                    } catch (error) {\n                        this.emit(\"error\", error);\n                    }\n                    return;\n                }\n                const body = response.body;\n                if (!body) {\n                    this.emit(\"error\", new response_1.ApiError({\n                        message: \"Response body is empty.\",\n                        status: 400,\n                        body: undefined\n                    }));\n                    return;\n                }\n                const isEventStream = ((_a = response.headers.get(\"content-type\")) !== null && _a !== void 0 ? _a : \"\").startsWith(CONTENT_TYPE_EVENT_STREAM);\n                // any response that is not a text/event-stream will be handled as a binary stream\n                if (!isEventStream) {\n                    const reader = body.getReader();\n                    const emitRawChunk = ()=>{\n                        reader.read().then(({ done, value })=>{\n                            if (done) {\n                                this.emit(\"done\", this.currentData);\n                                return;\n                            }\n                            this.currentData = value;\n                            this.emit(\"data\", value);\n                            emitRawChunk();\n                        });\n                    };\n                    emitRawChunk();\n                    return;\n                }\n                const decoder = new TextDecoder(\"utf-8\");\n                const reader = response.body.getReader();\n                const parser = (0, eventsource_parser_1.createParser)((event)=>{\n                    if (event.type === \"event\") {\n                        const data = event.data;\n                        try {\n                            const parsedData = JSON.parse(data);\n                            this.buffer.push(parsedData);\n                            this.currentData = parsedData;\n                            this.emit(\"data\", parsedData);\n                            // also emit 'message'for backwards compatibility\n                            this.emit(\"message\", parsedData);\n                        } catch (e) {\n                            this.emit(\"error\", e);\n                        }\n                    }\n                });\n                const timeout = (_b = this.options.timeout) !== null && _b !== void 0 ? _b : EVENT_STREAM_TIMEOUT;\n                const readPartialResponse = ()=>__awaiter(this, void 0, void 0, function*() {\n                        const { value, done } = yield reader.read();\n                        this.lastEventTimestamp = Date.now();\n                        parser.feed(decoder.decode(value));\n                        if (Date.now() - this.lastEventTimestamp > timeout) {\n                            this.emit(\"error\", new response_1.ApiError({\n                                message: `Event stream timed out after ${(timeout / 1000).toFixed(0)} seconds with no messages.`,\n                                status: 408\n                            }));\n                        }\n                        if (!done) {\n                            readPartialResponse().catch(this.handleError);\n                        } else {\n                            this.emit(\"done\", this.currentData);\n                        }\n                    });\n                readPartialResponse().catch(this.handleError);\n                return;\n            });\n        this.handleError = (error)=>{\n            var _a;\n            // In case AbortError is thrown but the signal is marked as aborted\n            // it means the user called abort() and we should not emit an error\n            // as it's expected behavior\n            // See note on: https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\n            if (error.name === \"AbortError\" || this.signal.aborted) {\n                return;\n            }\n            const apiError = error instanceof response_1.ApiError ? error : new response_1.ApiError({\n                message: (_a = error.message) !== null && _a !== void 0 ? _a : \"An unknown error occurred\",\n                status: 500\n            });\n            this.emit(\"error\", apiError);\n            return;\n        };\n        this.on = (type, listener)=>{\n            var _a;\n            if (!this.listeners.has(type)) {\n                this.listeners.set(type, []);\n            }\n            (_a = this.listeners.get(type)) === null || _a === void 0 ? void 0 : _a.push(listener);\n        };\n        this.emit = (type, event)=>{\n            const listeners = this.listeners.get(type) || [];\n            for (const listener of listeners){\n                listener(event);\n            }\n        };\n        /**\n         * Gets a reference to the `Promise` that indicates whether the streaming\n         * is done or not. Developers should always call this in their apps to ensure\n         * the request is over.\n         *\n         * An alternative to this, is to use `on('done')` in case your application\n         * architecture works best with event listeners.\n         *\n         * @returns the promise that resolves when the request is done.\n         */ this.done = ()=>__awaiter(this, void 0, void 0, function*() {\n                return this.donePromise;\n            });\n        /**\n         * Aborts the streaming request.\n         *\n         * **Note:** This method is noop in case the request is already done.\n         *\n         * @param reason optional cause for aborting the request.\n         */ this.abort = (reason)=>{\n            if (!this.streamClosed) {\n                this.abortController.abort(reason);\n            }\n        };\n        this.endpointId = endpointId;\n        this.config = config;\n        this.url = (_a = options.url) !== null && _a !== void 0 ? _a : (0, request_1.buildUrl)(endpointId, {\n            path: \"/stream\",\n            query: options.queryParams\n        });\n        this.options = options;\n        this.donePromise = new Promise((resolve, reject)=>{\n            if (this.streamClosed) {\n                reject(new response_1.ApiError({\n                    message: \"Streaming connection is already closed.\",\n                    status: 400,\n                    body: undefined\n                }));\n            }\n            this.signal.addEventListener(\"abort\", ()=>{\n                var _a;\n                resolve((_a = this.currentData) !== null && _a !== void 0 ? _a : {});\n            });\n            this.on(\"done\", (data)=>{\n                this.streamClosed = true;\n                resolve(data);\n            });\n            this.on(\"error\", (error)=>{\n                this.streamClosed = true;\n                reject(error);\n            });\n        });\n        // if a abort signal was passed, sync it with the internal one\n        if (options.signal) {\n            options.signal.addEventListener(\"abort\", ()=>{\n                this.abortController.abort();\n            });\n        }\n        // start the streaming request\n        this.start().catch(this.handleError);\n    }\n    [Symbol.asyncIterator]() {\n        return __asyncGenerator(this, arguments, function* _a() {\n            let running = true;\n            const stopAsyncIterator = ()=>running = false;\n            this.on(\"error\", stopAsyncIterator);\n            this.on(\"done\", stopAsyncIterator);\n            while(running){\n                const data = this.buffer.shift();\n                if (data) {\n                    yield yield __await(data);\n                }\n                // the short timeout ensures the while loop doesn't block other\n                // frames getting executed concurrently\n                yield __await(new Promise((resolve)=>setTimeout(resolve, 16)));\n            }\n        });\n    }\n    /**\n     * Gets the `AbortSignal` instance that can be used to listen for abort events.\n     *\n     * **Note:** this signal is internal to the `FalStream` instance. If you pass your\n     * own abort signal, the `FalStream` will listen to it and abort it appropriately.\n     *\n     * @returns the `AbortSignal` instance.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n     */ get signal() {\n        return this.abortController.signal;\n    }\n}\nexports.FalStream = FalStream;\nfunction createStreamingClient({ config, storage }) {\n    return {\n        stream (endpointId, options) {\n            return __awaiter(this, void 0, void 0, function*() {\n                const input = options.input ? yield storage.transformInput(options.input) : undefined;\n                return new FalStream(endpointId, config, Object.assign(Object.assign({}, options), {\n                    input: input\n                }));\n            });\n        }\n    };\n} //# sourceMappingURL=streaming.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/streaming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/types/common.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/types/common.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isQueueStatus = isQueueStatus;\nexports.isCompletedQueueStatus = isCompletedQueueStatus;\nfunction isQueueStatus(obj) {\n    return obj && obj.status && obj.response_url;\n}\nfunction isCompletedQueueStatus(obj) {\n    return isQueueStatus(obj) && obj.status === \"COMPLETED\";\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3R5cGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdFO0FBQ3hCRiw4QkFBOEIsR0FBR0c7QUFDakMsU0FBU0QsY0FBY0UsR0FBRztJQUN0QixPQUFPQSxPQUFPQSxJQUFJQyxNQUFNLElBQUlELElBQUlFLFlBQVk7QUFDaEQ7QUFDQSxTQUFTSCx1QkFBdUJDLEdBQUc7SUFDL0IsT0FBT0YsY0FBY0UsUUFBUUEsSUFBSUMsTUFBTSxLQUFLO0FBQ2hELEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWVudS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3R5cGVzL2NvbW1vbi5qcz9kM2JhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1F1ZXVlU3RhdHVzID0gaXNRdWV1ZVN0YXR1cztcbmV4cG9ydHMuaXNDb21wbGV0ZWRRdWV1ZVN0YXR1cyA9IGlzQ29tcGxldGVkUXVldWVTdGF0dXM7XG5mdW5jdGlvbiBpc1F1ZXVlU3RhdHVzKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLnN0YXR1cyAmJiBvYmoucmVzcG9uc2VfdXJsO1xufVxuZnVuY3Rpb24gaXNDb21wbGV0ZWRRdWV1ZVN0YXR1cyhvYmopIHtcbiAgICByZXR1cm4gaXNRdWV1ZVN0YXR1cyhvYmopICYmIG9iai5zdGF0dXMgPT09IFwiQ09NUExFVEVEXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNRdWV1ZVN0YXR1cyIsImlzQ29tcGxldGVkUXVldWVTdGF0dXMiLCJvYmoiLCJzdGF0dXMiLCJyZXNwb25zZV91cmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/types/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/src/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/src/utils.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ensureEndpointIdFormat = ensureEndpointIdFormat;\nexports.parseEndpointId = parseEndpointId;\nexports.isValidUrl = isValidUrl;\nexports.throttle = throttle;\nexports.isReact = isReact;\nexports.isPlainObject = isPlainObject;\nfunction ensureEndpointIdFormat(id) {\n    const parts = id.split(\"/\");\n    if (parts.length > 1) {\n        return id;\n    }\n    const [, appOwner, appId] = /^([0-9]+)-([a-zA-Z0-9-]+)$/.exec(id) || [];\n    if (appOwner && appId) {\n        return `${appOwner}/${appId}`;\n    }\n    throw new Error(`Invalid app id: ${id}. Must be in the format <appOwner>/<appId>`);\n}\nconst ENDPOINT_NAMESPACES = [\n    \"workflows\",\n    \"comfy\"\n];\nfunction parseEndpointId(id) {\n    const normalizedId = ensureEndpointIdFormat(id);\n    const parts = normalizedId.split(\"/\");\n    if (ENDPOINT_NAMESPACES.includes(parts[0])) {\n        return {\n            owner: parts[1],\n            alias: parts[2],\n            path: parts.slice(3).join(\"/\") || undefined,\n            namespace: parts[0]\n        };\n    }\n    return {\n        owner: parts[0],\n        alias: parts[1],\n        path: parts.slice(2).join(\"/\") || undefined\n    };\n}\nfunction isValidUrl(url) {\n    try {\n        const { host } = new URL(url);\n        return /(fal\\.(ai|run))$/.test(host);\n    } catch (_) {\n        return false;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(func, limit, leading = false) {\n    let lastFunc;\n    let lastRan;\n    return (...args)=>{\n        if (!lastRan && leading) {\n            func(...args);\n            lastRan = Date.now();\n        } else {\n            if (lastFunc) {\n                clearTimeout(lastFunc);\n            }\n            lastFunc = setTimeout(()=>{\n                if (Date.now() - lastRan >= limit) {\n                    func(...args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    };\n}\nlet isRunningInReact;\n/**\n * Not really the most optimal way to detect if we're running in React,\n * but the idea here is that we can support multiple rendering engines\n * (starting with React), with all their peculiarities, without having\n * to add a dependency or creating custom integrations (e.g. custom hooks).\n *\n * Yes, a bit of magic to make things works out-of-the-box.\n * @returns `true` if running in React, `false` otherwise.\n */ function isReact() {\n    if (isRunningInReact === undefined) {\n        const stack = new Error().stack;\n        isRunningInReact = !!stack && (stack.includes(\"node_modules/react-dom/\") || stack.includes(\"node_modules/next/\"));\n    }\n    return isRunningInReact;\n}\n/**\n * Check if a value is a plain object.\n * @param value - The value to check.\n * @returns `true` if the value is a plain object, `false` otherwise.\n */ function isPlainObject(value) {\n    return !!value && Object.getPrototypeOf(value) === Object.prototype;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw4QkFBOEIsR0FBR0U7QUFDakNGLHVCQUF1QixHQUFHRztBQUMxQkgsa0JBQWtCLEdBQUdJO0FBQ3JCSixnQkFBZ0IsR0FBR0s7QUFDbkJMLGVBQWUsR0FBR007QUFDbEJOLHFCQUFxQixHQUFHTztBQUN4QixTQUFTTCx1QkFBdUJNLEVBQUU7SUFDOUIsTUFBTUMsUUFBUUQsR0FBR0UsS0FBSyxDQUFDO0lBQ3ZCLElBQUlELE1BQU1FLE1BQU0sR0FBRyxHQUFHO1FBQ2xCLE9BQU9IO0lBQ1g7SUFDQSxNQUFNLEdBQUdJLFVBQVVDLE1BQU0sR0FBRyw2QkFBNkJDLElBQUksQ0FBQ04sT0FBTyxFQUFFO0lBQ3ZFLElBQUlJLFlBQVlDLE9BQU87UUFDbkIsT0FBTyxDQUFDLEVBQUVELFNBQVMsQ0FBQyxFQUFFQyxNQUFNLENBQUM7SUFDakM7SUFDQSxNQUFNLElBQUlFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRVAsR0FBRywwQ0FBMEMsQ0FBQztBQUNyRjtBQUNBLE1BQU1RLHNCQUFzQjtJQUFDO0lBQWE7Q0FBUTtBQUNsRCxTQUFTYixnQkFBZ0JLLEVBQUU7SUFDdkIsTUFBTVMsZUFBZWYsdUJBQXVCTTtJQUM1QyxNQUFNQyxRQUFRUSxhQUFhUCxLQUFLLENBQUM7SUFDakMsSUFBSU0sb0JBQW9CRSxRQUFRLENBQUNULEtBQUssQ0FBQyxFQUFFLEdBQUc7UUFDeEMsT0FBTztZQUNIVSxPQUFPVixLQUFLLENBQUMsRUFBRTtZQUNmVyxPQUFPWCxLQUFLLENBQUMsRUFBRTtZQUNmWSxNQUFNWixNQUFNYSxLQUFLLENBQUMsR0FBR0MsSUFBSSxDQUFDLFFBQVFDO1lBQ2xDQyxXQUFXaEIsS0FBSyxDQUFDLEVBQUU7UUFDdkI7SUFDSjtJQUNBLE9BQU87UUFDSFUsT0FBT1YsS0FBSyxDQUFDLEVBQUU7UUFDZlcsT0FBT1gsS0FBSyxDQUFDLEVBQUU7UUFDZlksTUFBTVosTUFBTWEsS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxRQUFRQztJQUN0QztBQUNKO0FBQ0EsU0FBU3BCLFdBQVdzQixHQUFHO0lBQ25CLElBQUk7UUFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLElBQUlDLElBQUlGO1FBQ3pCLE9BQU8sbUJBQW1CRyxJQUFJLENBQUNGO0lBQ25DLEVBQ0EsT0FBT0csR0FBRztRQUNOLE9BQU87SUFDWDtBQUNKO0FBQ0EsOERBQThEO0FBQzlELFNBQVN6QixTQUFTMEIsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFVBQVUsS0FBSztJQUMxQyxJQUFJQztJQUNKLElBQUlDO0lBQ0osT0FBTyxDQUFDLEdBQUdDO1FBQ1AsSUFBSSxDQUFDRCxXQUFXRixTQUFTO1lBQ3JCRixRQUFRSztZQUNSRCxVQUFVRSxLQUFLQyxHQUFHO1FBQ3RCLE9BQ0s7WUFDRCxJQUFJSixVQUFVO2dCQUNWSyxhQUFhTDtZQUNqQjtZQUNBQSxXQUFXTSxXQUFXO2dCQUNsQixJQUFJSCxLQUFLQyxHQUFHLEtBQUtILFdBQVdILE9BQU87b0JBQy9CRCxRQUFRSztvQkFDUkQsVUFBVUUsS0FBS0MsR0FBRztnQkFDdEI7WUFDSixHQUFHTixRQUFTSyxDQUFBQSxLQUFLQyxHQUFHLEtBQUtILE9BQU07UUFDbkM7SUFDSjtBQUNKO0FBQ0EsSUFBSU07QUFDSjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNuQztJQUNMLElBQUltQyxxQkFBcUJqQixXQUFXO1FBQ2hDLE1BQU1rQixRQUFRLElBQUkzQixRQUFRMkIsS0FBSztRQUMvQkQsbUJBQ0ksQ0FBQyxDQUFDQyxTQUNHQSxDQUFBQSxNQUFNeEIsUUFBUSxDQUFDLDhCQUNad0IsTUFBTXhCLFFBQVEsQ0FBQyxxQkFBb0I7SUFDbkQ7SUFDQSxPQUFPdUI7QUFDWDtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTbEMsY0FBY04sS0FBSztJQUN4QixPQUFPLENBQUMsQ0FBQ0EsU0FBU0gsT0FBTzZDLGNBQWMsQ0FBQzFDLFdBQVdILE9BQU84QyxTQUFTO0FBQ3ZFLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWVudS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9jbGllbnQvc3JjL3V0aWxzLmpzPzkyZDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuc3VyZUVuZHBvaW50SWRGb3JtYXQgPSBlbnN1cmVFbmRwb2ludElkRm9ybWF0O1xuZXhwb3J0cy5wYXJzZUVuZHBvaW50SWQgPSBwYXJzZUVuZHBvaW50SWQ7XG5leHBvcnRzLmlzVmFsaWRVcmwgPSBpc1ZhbGlkVXJsO1xuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlO1xuZXhwb3J0cy5pc1JlYWN0ID0gaXNSZWFjdDtcbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG5mdW5jdGlvbiBlbnN1cmVFbmRwb2ludElkRm9ybWF0KGlkKSB7XG4gICAgY29uc3QgcGFydHMgPSBpZC5zcGxpdChcIi9cIik7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBjb25zdCBbLCBhcHBPd25lciwgYXBwSWRdID0gL14oWzAtOV0rKS0oW2EtekEtWjAtOS1dKykkLy5leGVjKGlkKSB8fCBbXTtcbiAgICBpZiAoYXBwT3duZXIgJiYgYXBwSWQpIHtcbiAgICAgICAgcmV0dXJuIGAke2FwcE93bmVyfS8ke2FwcElkfWA7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhcHAgaWQ6ICR7aWR9LiBNdXN0IGJlIGluIHRoZSBmb3JtYXQgPGFwcE93bmVyPi88YXBwSWQ+YCk7XG59XG5jb25zdCBFTkRQT0lOVF9OQU1FU1BBQ0VTID0gW1wid29ya2Zsb3dzXCIsIFwiY29tZnlcIl07XG5mdW5jdGlvbiBwYXJzZUVuZHBvaW50SWQoaWQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkSWQgPSBlbnN1cmVFbmRwb2ludElkRm9ybWF0KGlkKTtcbiAgICBjb25zdCBwYXJ0cyA9IG5vcm1hbGl6ZWRJZC5zcGxpdChcIi9cIik7XG4gICAgaWYgKEVORFBPSU5UX05BTUVTUEFDRVMuaW5jbHVkZXMocGFydHNbMF0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvd25lcjogcGFydHNbMV0sXG4gICAgICAgICAgICBhbGlhczogcGFydHNbMl0sXG4gICAgICAgICAgICBwYXRoOiBwYXJ0cy5zbGljZSgzKS5qb2luKFwiL1wiKSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IHBhcnRzWzBdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBvd25lcjogcGFydHNbMF0sXG4gICAgICAgIGFsaWFzOiBwYXJ0c1sxXSxcbiAgICAgICAgcGF0aDogcGFydHMuc2xpY2UoMikuam9pbihcIi9cIikgfHwgdW5kZWZpbmVkLFxuICAgIH07XG59XG5mdW5jdGlvbiBpc1ZhbGlkVXJsKHVybCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdCB9ID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICByZXR1cm4gLyhmYWxcXC4oYWl8cnVuKSkkLy50ZXN0KGhvc3QpO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIGxpbWl0LCBsZWFkaW5nID0gZmFsc2UpIHtcbiAgICBsZXQgbGFzdEZ1bmM7XG4gICAgbGV0IGxhc3RSYW47XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmICghbGFzdFJhbiAmJiBsZWFkaW5nKSB7XG4gICAgICAgICAgICBmdW5jKC4uLmFyZ3MpO1xuICAgICAgICAgICAgbGFzdFJhbiA9IERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobGFzdEZ1bmMpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobGFzdEZ1bmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEZ1bmMgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGxhc3RSYW4gPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJhbiA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbGltaXQgLSAoRGF0ZS5ub3coKSAtIGxhc3RSYW4pKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5sZXQgaXNSdW5uaW5nSW5SZWFjdDtcbi8qKlxuICogTm90IHJlYWxseSB0aGUgbW9zdCBvcHRpbWFsIHdheSB0byBkZXRlY3QgaWYgd2UncmUgcnVubmluZyBpbiBSZWFjdCxcbiAqIGJ1dCB0aGUgaWRlYSBoZXJlIGlzIHRoYXQgd2UgY2FuIHN1cHBvcnQgbXVsdGlwbGUgcmVuZGVyaW5nIGVuZ2luZXNcbiAqIChzdGFydGluZyB3aXRoIFJlYWN0KSwgd2l0aCBhbGwgdGhlaXIgcGVjdWxpYXJpdGllcywgd2l0aG91dCBoYXZpbmdcbiAqIHRvIGFkZCBhIGRlcGVuZGVuY3kgb3IgY3JlYXRpbmcgY3VzdG9tIGludGVncmF0aW9ucyAoZS5nLiBjdXN0b20gaG9va3MpLlxuICpcbiAqIFllcywgYSBiaXQgb2YgbWFnaWMgdG8gbWFrZSB0aGluZ3Mgd29ya3Mgb3V0LW9mLXRoZS1ib3guXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgcnVubmluZyBpbiBSZWFjdCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUmVhY3QoKSB7XG4gICAgaWYgKGlzUnVubmluZ0luUmVhY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICBpc1J1bm5pbmdJblJlYWN0ID1cbiAgICAgICAgICAgICEhc3RhY2sgJiZcbiAgICAgICAgICAgICAgICAoc3RhY2suaW5jbHVkZXMoXCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL1wiKSB8fFxuICAgICAgICAgICAgICAgICAgICBzdGFjay5pbmNsdWRlcyhcIm5vZGVfbW9kdWxlcy9uZXh0L1wiKSk7XG4gICAgfVxuICAgIHJldHVybiBpc1J1bm5pbmdJblJlYWN0O1xufVxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW5zdXJlRW5kcG9pbnRJZEZvcm1hdCIsInBhcnNlRW5kcG9pbnRJZCIsImlzVmFsaWRVcmwiLCJ0aHJvdHRsZSIsImlzUmVhY3QiLCJpc1BsYWluT2JqZWN0IiwiaWQiLCJwYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwiYXBwT3duZXIiLCJhcHBJZCIsImV4ZWMiLCJFcnJvciIsIkVORFBPSU5UX05BTUVTUEFDRVMiLCJub3JtYWxpemVkSWQiLCJpbmNsdWRlcyIsIm93bmVyIiwiYWxpYXMiLCJwYXRoIiwic2xpY2UiLCJqb2luIiwidW5kZWZpbmVkIiwibmFtZXNwYWNlIiwidXJsIiwiaG9zdCIsIlVSTCIsInRlc3QiLCJfIiwiZnVuYyIsImxpbWl0IiwibGVhZGluZyIsImxhc3RGdW5jIiwibGFzdFJhbiIsImFyZ3MiLCJEYXRlIiwibm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImlzUnVubmluZ0luUmVhY3QiLCJzdGFjayIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/client/src/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/client/package.json":
/*!**************************************************!*\
  !*** ./node_modules/@fal-ai/client/package.json ***!
  \**************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@fal-ai/client","description":"The fal.ai client for JavaScript and TypeScript","version":"1.2.1","license":"MIT","repository":{"type":"git","url":"https://github.com/fal-ai/fal-js.git","directory":"libs/client"},"keywords":["fal","client","ai","ml","typescript"],"exports":{".":"./src/index.js","./endpoints":"./src/types/endpoints.js"},"typesVersions":{"*":{"endpoints":["src/types/endpoints.d.ts"]}},"main":"./src/index.js","types":"./src/index.d.ts","dependencies":{"@msgpack/msgpack":"^3.0.0-beta2","eventsource-parser":"^1.1.2","robot3":"^0.4.1"},"engines":{"node":">=18.0.0"},"type":"commonjs"}');

/***/ })

};
;